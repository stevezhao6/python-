T<div class="post-body" itemprop="articleBody">

      
      

      
        <p>Teambition是一个跨平台的团队协作和项目管理工具，相当于国外的Trello。使用Teambition可以像使用白板与便签纸一样来管理项目进度，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-03-23-45-13.png" alt=""/></p>
<p>Teambition虽然便于管理项目，但是如果直接在Teambition上面创建一个项目对应的任务，却容易陷入面对茫茫白板，不知道如何拆分任务的尴尬境地。如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-03-23-47-38.png" alt=""/></p>
<p>面对这个空荡荡的窗口，应该添加哪些任务进去？直接用脑子现想，恐怕容易出现顾此失彼或者干脆漏掉了任务的情况。</p>
<p>当我要开始一个项目的时候，我一般不会直接打开Teambition就写任务，而是使用一个大纲工具——Workflowy来梳理思路，切分任务。等任务已经切分好了，在誊写到Teambition中，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-03-23-53-06.png" alt=""/></p>
<p>但这样就出现了一个问题：首先在Workflowy上面把需要做的任务写好。然后再打开Teambition，把这些任务又誊写到Teambition中。为了减少“誊写”这一步重复劳动，于是就有了TeamFlowy这个小工具。它的作用是自动誊写Workflowy中的特定条目到Teambition中。</p>
<a id="more"/>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"/>功能介绍</h2><p>TeamFlowy是一个Python脚本，运行以后，它会登录Workflowy账号，读取上面所有的条目。名为[Teambition]的条目是任务开始的标记，这个条目下面的一级条目会作为任务被添加到Teambition中。如果任务下面还有二级条目，这些二级条目会作为子任务被添加到任务中。由于Teambition是按照项目-Stage-任务-子任务的形式组织一个工程（其中Stage对应了Teambition中工程下面的面板，例如：“待处理”，“进行中”，“完成”。）不会存在子任务的子任务，所以Workflowy中[Teambition]这个条目下面最多出现二级缩进。如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-10-28-13.png" alt=""/></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"/>实现原理</h2><h3 id="Workflowy"><a href="#Workflowy" class="headerlink" title="Workflowy"/>Workflowy</h3><p>获取Workflowy上面的条目，需要进行三步操作：</p>
<ol>
<li>登录Workflowy</li>
<li>获取所有条目对应的JSON字符串</li>
<li>提取需要添加到Teambition中的条目</li>
</ol>
<h4 id="登录Workflowy"><a href="#登录Workflowy" class="headerlink" title="登录Workflowy"/>登录Workflowy</h4><p>打开Chrome监控登录Wokrflowy的过程，可以看到登录Workflowy需要访问的接口为：<code>https://workflowy.com/accounts/login/</code>。使用HTTP <code>POST</code>方式发送请求，提交的数据包括<code>username</code>，<code>password</code>和一个不知道用途的<code>next</code>。如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-10-47-51.png" alt=""/></p>
<p>使用Python的第三方网络模块<code>requests</code>向这个模块发送<code>POST</code>请求，提交用户名和密码即可实现登录。其代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line">login_url = <span class="string">'https://workflowy.com/accounts/login/'</span></span><br/><span class="line">session = requests.Session()</span><br/><span class="line">session.post(login_url,</span><br/><span class="line">             data={<span class="string">'username'</span>: <span class="string">'<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e8d9dadbdcdda89999c68b8785">[email protected]</a>'</span>,</span><br/><span class="line">                   <span class="string">'password'</span>: <span class="string">'8888888'</span>,</span><br/><span class="line">                   <span class="string">'next'</span>: <span class="string">''</span>})</span><br/></pre></td></tr></table></figure>
<h4 id="获取所有条目"><a href="#获取所有条目" class="headerlink" title="获取所有条目"/>获取所有条目</h4><p>使用<code>requests</code>的<code>session</code>登录Workflowy以后，Cookies会被自动保存到<code>session</code>这个对象里面。于是使用<code>session</code>继续访问Workfowy就可以以登录后的身份查看自己的各个条目。</p>
<p>通过Chrome可以看到获取所有条目的接口为<code>https://workflowy.com/get_initialization_data?client_version=18</code>，接口返回的数据是一个包含所有条目的超大型JSON字符串，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-10-55-40.png" alt=""/></p>
<p>使用Python的json模块可以解析这个JSON字符串为字典，并获取所有条目，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line">outline_url = <span class="string">'https://workflowy.com/get_initialization_data?client_version=18'</span></span><br/><span class="line">outlines_json = session.get(outline_url).text</span><br/><span class="line">outlines_dict = json.loads(outlines_json)</span><br/><span class="line">project_list = outlines_dict.get(<span class="string">'projectTreeData'</span>, {})\</span><br/><span class="line">    .get(<span class="string">'mainProjectTreeInfo'</span>, {})\</span><br/><span class="line">    .get(<span class="string">'rootProjectChildren'</span>, [])</span><br/></pre></td></tr></table></figure>
<h4 id="提取任务与子任务"><a href="#提取任务与子任务" class="headerlink" title="提取任务与子任务"/>提取任务与子任务</h4><p>所有的条目层层嵌套在列表-字典结构中，其基本的形态如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line">{</span><br/><span class="line">    <span class="string">"ch"</span>: [子条目], </span><br/><span class="line">    <span class="string">"lm"</span>: <span class="number">308496</span>, </span><br/><span class="line">    <span class="string">"id"</span>: <span class="string">"957996b9-67ce-51c7-a796-bfbee44e3d3f"</span>, </span><br/><span class="line">    <span class="string">"nm"</span>: <span class="string">"AutoEmo"</span></span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>其中的<code>nm</code>为这个条目的名字。如果一个条目有子条目，那么<code>ch</code>列表中就会有很多个字典，每个字典的都是这个结构，如果一个条目没有子条目，那么就没有<code>ch</code>这个key。这样一层一层嵌套下去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/></pre></td><td class="code"><pre><span class="line"> {</span><br/><span class="line">    <span class="string">"ch"</span>: [</span><br/><span class="line">        {</span><br/><span class="line">            <span class="string">"lm"</span>: <span class="number">558612</span>, </span><br/><span class="line">            <span class="string">"id"</span>: <span class="string">"5117e20b-25ba-ba91-59e1-790c0636f78e"</span>, </span><br/><span class="line">            <span class="string">"nm"</span>: <span class="string">"准备并熟背一段自我介绍，在任何需要自我介绍的场合都有用"</span></span><br/><span class="line">        }, </span><br/><span class="line">        {</span><br/><span class="line">            <span class="string">"lm"</span>: <span class="number">558612</span>, </span><br/><span class="line">            <span class="string">"id"</span>: <span class="string">"4894b23e-6f47-8028-a26a-5fb315fc4e6f"</span>, </span><br/><span class="line">            <span class="string">"nm"</span>: <span class="string">"姓名，来自哪里，什么工作"</span>,</span><br/><span class="line">            <span class="string">"ch"</span>: [</span><br/><span class="line">                {<span class="string">"lm"</span>: <span class="number">5435246</span>, </span><br/><span class="line">                 <span class="string">"id"</span>: <span class="string">"4894b23e-6f47-8028-a26a-5fbadfasdc4e6f"</span>, </span><br/><span class="line">                 <span class="string">"nm"</span>: <span class="string">"工作经验"</span>}</span><br/><span class="line">            ]</span><br/><span class="line">        }</span><br/><span class="line">    ], </span><br/><span class="line">    <span class="string">"lm"</span>: <span class="number">558612</span>, </span><br/><span class="line">    <span class="string">"id"</span>: <span class="string">"ea282a1c-94f3-1a44-c5b3-7907792e9e6e"</span>, </span><br/><span class="line">    <span class="string">"nm"</span>: <span class="string">"自我介绍"</span></span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>由于条目和子条目的结构是一样的，那么就可以使用递归来解析每一个条目。由于需要添加到Teambition的任务，从名为[Teambition]的条目开始，于是可以使用下面这样一个函数来解析：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/></pre></td><td class="code"><pre><span class="line">task_dict = {}</span><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_task</span><span class="params">(sections, task_dict, target_section=False)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> section <span class="keyword">in</span> sections:</span><br/><span class="line">        name = section[<span class="string">'nm'</span>]</span><br/><span class="line">        <span class="keyword">if</span> target_section:</span><br/><span class="line">            task_dict[name] = [x[<span class="string">'nm'</span>] <span class="keyword">for</span> x <span class="keyword">in</span> section.get(<span class="string">'ch'</span>, [])]</span><br/><span class="line">            <span class="keyword">continue</span></span><br/><span class="line"/><br/><span class="line">        <span class="keyword">if</span> name == <span class="string">'[Teambition]'</span>:</span><br/><span class="line">            target_section = <span class="literal">True</span></span><br/><span class="line">        sub_sections = section.get(<span class="string">'ch'</span>, [])</span><br/><span class="line">        extract_task(sub_sections, task_dict, target_section=target_section)</span><br/></pre></td></tr></table></figure>
<p>下图所示为一段需要添加到Teambition中的条目，运行这段函数以后，得到的结果为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">{<span class="string">'登录Workflowy'</span>: [], <span class="string">'获取需要添加到Teambition的内容'</span>: [<span class="string">'获取任务'</span>, <span class="string">'获取子任务'</span>], <span class="string">'调试Teambition API'</span>: [], <span class="string">'添加任务到Teambition'</span>: []}</span><br/></pre></td></tr></table></figure>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-09-03.png" alt=""/></p>
<h2 id="Teambition"><a href="#Teambition" class="headerlink" title="Teambition"/>Teambition</h2><p>将任务添加到Teambition，需要使用Teambition的Python SDK登录Teambition并调用API添加任务。Teambition的Python SDK在使用<code>OAuth2</code>获取<code>access_token</code>的时候有一个坑，需要特别注意。</p>
<h3 id="登录Teambition"><a href="#登录Teambition" class="headerlink" title="登录Teambition"/>登录Teambition</h3><h4 id="设置Teambition应用"><a href="#设置Teambition应用" class="headerlink" title="设置Teambition应用"/>设置Teambition应用</h4><p>Teambition 是使用<code>OAuth2</code>来进行权限验证的，所以需要获取<code>access_token</code>。</p>
<p>首先打开Teambition的<a href="https://developer.teambition.com/dashboard" target="_blank" rel="noopener">开发者中心</a>并单击<code>新建应用</code>，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-14-38.png" alt=""/></p>
<p>应用名称可以随便写。创建好应用以后，可以看到应用的信息，需要记录<code>Client ID</code>和<code>Client Secret</code>，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-18-20.png" alt=""/></p>
<p>点击左侧的<code>OAuth2</code>配置，填写回调URL，如下图所示。这里的这个URL其实使用任何一个可以访问的网站的域名都可以，这里以我的博客地址为例。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-20-49.png" alt=""/></p>
<h4 id="使用Python获取access-token"><a href="#使用Python获取access-token" class="headerlink" title="使用Python获取access_token"/>使用Python获取access_token</h4><p>首先在Python中安装Teambition的SDK：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">pip install teambition</span><br/></pre></td></tr></table></figure>
<p>接下来，在Python中获取授权URL：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> teambition <span class="keyword">import</span> Teambition</span><br/><span class="line"/><br/><span class="line">tb_client_id = <span class="string">'7bfae080-a8dc-11e7-b543-77a936726657'</span></span><br/><span class="line">tb_client_secret = <span class="string">'9830fc8c-81b3-45ed-b3c0-e039ab8f2d8b'</span></span><br/><span class="line">tb = Teambition(tb_client_id,</span><br/><span class="line">                tb_client_secret)</span><br/><span class="line">authorize_url = tb.oauth.get_authorize_url(<span class="string">'https://kingname.info'</span>)</span><br/><span class="line">print(authorize_url)</span><br/></pre></td></tr></table></figure>
<p>代码运行以后，会得到一段形如下面这段URL的授权URL：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">https://account.teambition.com/oauth2/authorize?client_id=7bfae080-a8dc-11e7-b543-77a936726657&amp;redirect_uri=https://kingname.info&amp;state=&amp;lang=zh</span><br/></pre></td></tr></table></figure>
<p>在电脑浏览器中<strong>人工</strong>访问这个URL，会出现下面这样的页面。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-31-25.png" alt=""/></p>
<p>单击<code>授权并登录</code>，可以看到浏览器上面的网址变为形如：<code>https://kingname.info/?code=Pn7ebs4sZh3NYOz2FvVJQ4uu</code>，此时，需要记录<code>code=</code>后面的这一串字符串<code>Pn7ebs4sZh3NYOz2FvVJQ4uu</code>。</p>
<p>接下来就是Teambition的SDK的坑点了，根据Teambition官方文档的说法，要获取access_token，只需要如下两段代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">code = <span class="string">'Pn7ebs4sZh3NYOz2FvVJQ4uu'</span> <span class="comment">#前面浏览器中的字符串</span></span><br/><span class="line">tb.oauth.fetch_access_token(code)</span><br/><span class="line"><span class="comment"># 上面的代码完成授权，接下来直接使用tb.xxxx就可以操作任务了。</span></span><br/></pre></td></tr></table></figure>
<p>但实际上，上面这一段代码一定会报错。提示<code>grant invaild</code>。要解决这个问题，就必需使用Teambition的HTTP 接口来人工获取access_token。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line">code = <span class="string">'Pn7ebs4sZh3NYOz2FvVJQ4uu'</span> <span class="comment">#前面浏览器中的字符串</span></span><br/><span class="line">fetch_result_dict = session.post(<span class="string">'https://account.teambition.com/oauth2/access_token'</span>,</span><br/><span class="line">                  data={<span class="string">'client_id'</span>: tb_client_id,</span><br/><span class="line">                        <span class="string">'client_secret'</span>: tb_client_secret,</span><br/><span class="line">                        <span class="string">'code'</span>: code,</span><br/><span class="line">                        <span class="string">'grant_type'</span>: <span class="string">'code'</span>}).json()</span><br/><span class="line">tb_access_token = fetch_result_dict.get(<span class="string">'access_token'</span>, <span class="string">''</span>)</span><br/></pre></td></tr></table></figure>
<p>此时得到的access_token是一段非常长的字符串。接下来，重新初始化tb变量：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">tb = Teambition(tb_client_id,</span><br/><span class="line">                tb_client_secret,</span><br/><span class="line">                access_token=tb_access_token)</span><br/></pre></td></tr></table></figure>
<p>初始化以后，使用tb这个变量，就可以对工程和任务进行各种操作了。</p>
<h4 id="Teambition的简单使用"><a href="#Teambition的简单使用" class="headerlink" title="Teambition的简单使用"/>Teambition的简单使用</h4><p>要在某个工程里面创建任务，就需要知道工程的ID。首先在Teambition中手动创建一个工程，在浏览器中打开工程，URL中可以看到工程的ID，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-45-51.png" alt=""/></p>
<p>有了工程ID以后，就可以使用下面的代码创建任务：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_task</span><span class="params">(task_name, sub_task_list)</span>:</span></span><br/><span class="line">    tasklist = tb.tasklists.get(project_id=<span class="string">'59d396ee1013d919f3348675'</span>)[<span class="number">0</span>]</span><br/><span class="line">    tasklist_id = tasklist[<span class="string">'_id'</span>]</span><br/><span class="line">    todo_stage_id = tasklist[<span class="string">'stageIds'</span>][<span class="number">0</span>]</span><br/><span class="line">    task_info = tb.tasks.create(task_name, tasklist_id=tasklist_id, stage_id=todo_stage_id)</span><br/><span class="line">    <span class="keyword">if</span> sub_task_list:</span><br/><span class="line">        task_id = task_info[<span class="string">'_id'</span>]</span><br/><span class="line">        <span class="keyword">for</span> sub_task_name <span class="keyword">in</span> sub_task_list:</span><br/><span class="line">            tb.subtasks.create(sub_task_name, task_id=task_id)</span><br/><span class="line">    print(<span class="string">f'task: <span class="subst">{task_name}</span> with sub tasks: <span class="subst">{sub_task_list}</span> added.'</span>)</span><br/></pre></td></tr></table></figure>
<p>这段代码首先使用<code>tb.tasklists.get()</code>根据工程ID获得任务组的ID和<code>待处理</code>这个面板的ID，接下来调用<code>tb.tasks.create()</code>接口添加任务。从添加任务返回的信息里面拿到任务的ID，再根据任务ID，调用<code>tb.subtasks.create()</code>添加子任务ID。</p>
<h2 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"/>效果测试</h2><p>上面的代码实现了TeamFlowy的基本逻辑。运行TeamFlowy脚本以后，[Teambition]这个条目下面的任务被成功的添加到了Teambition中，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-16-55-34.png" alt=""/></p>
<p>将代码组合起来并进行完善，让代码更容易使用，完整的代码可以查看<a href="https://github.com/kingname/TeamFlowy" target="_blank" rel="noopener">https://github.com/kingname/TeamFlowy</a>。完整的代码运行效果如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2017-10-04-17-01-11.png" alt=""/></p>

      
    </div>

    

    
    
    

    
      