如<div class="post-body" itemprop="articleBody">

      
      

      
        <p>我们平时导入第三方模块的时候，一般使用的是<code>import</code>关键字，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br/><span class="line"><span class="keyword">from</span> scrapy.spider <span class="keyword">import</span> Spider</span><br/></pre></td></tr></table></figure>
<p>但是如果各位同学看过 Scrapy 的<code>settings.py</code>文件，就会发现里面会通过字符串的方式来指定pipeline 和 middleware，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = {</span><br/><span class="line">    <span class="string">'Test.middlewares.ExceptionRetryMiddleware'</span>: <span class="number">545</span>,</span><br/><span class="line">    <span class="string">'Test.middlewares.BOProxyMiddlewareV2'</span>: <span class="number">543</span>,</span><br/><span class="line">}</span><br/><span class="line"/><br/><span class="line"> SPIDER_MIDDLEWARES = {</span><br/><span class="line">   <span class="string">'Test.middlewares.LoggingRequestMiddleware'</span>: <span class="number">543</span>,</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>我们知道，这里的<code>Test.middlewares.ExceptionRetryMiddleware</code>实际上对应了根目录下面的<code>Test</code>文件夹里面的<code>middlewares.py</code>文件中的<code>ExceptionRetryMiddleware</code>类。那么 Scrapy 是如何根据这个字符串，导入这个类的呢？</p>
<a id="more"/>
<p>在 Scrapy 源代码中，我们可以找到<a href="https://github.com/scrapy/scrapy/blob/master/scrapy/utils/misc.py#L33" target="_blank" rel="noopener">相关的代码</a>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_object</span><span class="params">(path)</span>:</span></span><br/><span class="line">    <span class="string">"""Load an object given its absolute object path, and return it.</span></span><br/><span class="line"><span class="string">    object can be a class, function, variable or an instance.</span></span><br/><span class="line"><span class="string">    path ie: 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'</span></span><br/><span class="line"><span class="string">    """</span></span><br/><span class="line"/><br/><span class="line">    <span class="keyword">try</span>:</span><br/><span class="line">        dot = path.rindex(<span class="string">'.'</span>)</span><br/><span class="line">    <span class="keyword">except</span> ValueError:</span><br/><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Error loading object '%s': not a full path"</span> % path)</span><br/><span class="line"/><br/><span class="line">    module, name = path[:dot], path[dot+<span class="number">1</span>:]</span><br/><span class="line">    mod = import_module(module)</span><br/><span class="line"/><br/><span class="line">    <span class="keyword">try</span>:</span><br/><span class="line">        obj = getattr(mod, name)</span><br/><span class="line">    <span class="keyword">except</span> AttributeError:</span><br/><span class="line">        <span class="keyword">raise</span> NameError(<span class="string">"Module '%s' doesn't define any object named '%s'"</span> % (module, name))</span><br/><span class="line"/><br/><span class="line">    <span class="keyword">return</span> obj</span><br/></pre></td></tr></table></figure>
<p>根据这段代码，我们知道，它使用了<code>importlib</code>模块的<code>import_module</code>函数：</p>
<ol>
<li>首先根据字符串路径最右侧的<code>.</code>把字符串路径分成两个部分，例如：<code>Test.middlewares.LoggingRequestMiddleware</code>分成<code>Test.middlewares</code>和<code>LoggingRequestMiddleware</code></li>
<li>使用<code>import_module</code>导入左边的部分</li>
<li>从左边部分通过<code>getattr</code>获得具体的类</li>
</ol>
<p>现在我们来测试一下。我们创建的测试文件结构如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-22-22-27-25.png" alt=""/></p>
<p>其中，<code>pipelines.py</code>文件的内容如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-22-22-27-57.png" alt=""/></p>
<p><code>main.py</code>文件的内容如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-22-22-31-23.png" alt=""/></p>
<p>运行<code>main.py</code>，可以看到<code>pipelines.py</code>中的<code>Pipeline</code>类被成功执行了，如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-22-22-33-39.png" alt=""/></p>

      
    </div>

    

    
    
    

    
      