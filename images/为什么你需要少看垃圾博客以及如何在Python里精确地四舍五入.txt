为<div class="post-body" itemprop="articleBody">

      
      

      
        <p>今天又有一个Python初学者被中文技术博客中的垃圾文章给误导了。</p>
<p>这位初学者的问题是：</p>
<blockquote>
<p>在Python中，如何精确地进行浮点数的四舍五入，保留两位小数？</p>
</blockquote>
<a id="more"/>
<p>如果你在Google或者百度上搜索，你会发现大量的来自CSDN或者简书上面的文章讲到这一点，但是他们的说法无外乎下面几种：</p>
<h2 id="连例子都不举的垃圾文章"><a href="#连例子都不举的垃圾文章" class="headerlink" title="连例子都不举的垃圾文章"/>连例子都不举的垃圾文章</h2><p>如下图所示，懒得吐槽。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-30-23-51-43.png" alt=""/></p>
<h2 id="使用round函数"><a href="#使用round函数" class="headerlink" title="使用round函数"/>使用round函数</h2><p>他们举的例子为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.234</span>, <span class="number">2</span>)</span><br/><span class="line"><span class="number">1.23</span></span><br/></pre></td></tr></table></figure>
<p>这种文章，他只演示了<code>四舍</code>，但是却没有演示<code>五入</code>。所以如果你代码稍作修改，就会发现有问题：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">11.245</span>, <span class="number">2</span>)</span><br/><span class="line"><span class="number">11.24</span></span><br/></pre></td></tr></table></figure>
<h2 id="先放大再缩小"><a href="#先放大再缩小" class="headerlink" title="先放大再缩小"/>先放大再缩小</h2><p>这种文章稍微好一点，知道多举几个例子：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-30-23-53-12.png" alt=""/></p>
<p>然而这种文章也是漏洞百出，只要你多尝试几个数字就会发现问题，在Python 2和Python 3下面，效果是不一样的。先来看看Python 2下面的运行效果：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-11-03-02.png" alt=""/></p>
<p>在Python 2里面，直接使用<code>round</code>，<code>1.125</code>精确到两位小数后为<code>1.13</code>，而<code>1.115</code>精确到两位小数后是<code>1.11</code>。</p>
<p>再来看看Python 3下面的效果：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-11-04-32.png" alt=""/></p>
<p>在Python 3下面，<code>1.125</code>在精确到两位小数以后是<code>1.12</code>。</p>
<p>他举的例子，在Python 3中先放大再缩小，也并不总是正确。</p>
<h3 id="装逼货"><a href="#装逼货" class="headerlink" title="装逼货"/>装逼货</h3><p>还有一种装逼货，文章和先放大再缩小差不多，但是他还知道<code>decimal</code>这个模块。</p>
<p>不过他的使用方法，大家看他吧</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-00-12-22.png" alt=""/></p>
<p><code>具体原因不详</code> ？？？？</p>
<p><code>不推荐使用这个方法</code>？？？</p>
<p>这种人要先装个逼，表示自己知道有这样一个库，但是用起来发现有问题，而且不知道原因，所以不建议大家使用。</p>
<p>decimal是专门为高精度计算用的模块，他竟然说不建议大家使用？？？</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-09-36-51.png" alt=""/></p>
<h2 id="round到底出了什么问题？"><a href="#round到底出了什么问题？" class="headerlink" title="round到底出了什么问题？"/>round到底出了什么问题？</h2><p>骂完了，我们来说说，在Python 3里面，<code>round</code>这个内置的函数到底有什么问题。</p>
<p>网上有人说，因为在计算机里面，小数是不精确的，例如<code>1.115</code>在计算机中实际上是<code>1.1149999999999999911182</code>，所以当你对这个小数精确到小数点后两位的时候，实际上小数点后第三位是<code>4</code>，所以四舍五入，因此结果为<code>1.11</code>。</p>
<p>这种说法，对了一半。</p>
<p>因为并不是所有的小数在计算机中都是不精确的。例如<code>0.125</code>这个小数在计算机中就是精确的，它就是<code>0.125</code>，没有省略后面的值，没有近似，它确确实实就是<code>0.125</code>。</p>
<p>但是如果我们在Python中把<code>0.125</code>精确到小数点后两位，那么它的就会变成<code>0.12</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.125</span>, <span class="number">2</span>)</span><br/><span class="line"><span class="number">0.12</span></span><br/></pre></td></tr></table></figure>
<p>为什么在这里<code>四舍</code>了？</p>
<p>还有更奇怪的，另一个在计算机里面能够精确表示的小数<code>0.375</code>，我们来看看精确到小数点后两位是多少：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.375</span>, <span class="number">2</span>)</span><br/><span class="line"><span class="number">0.38</span></span><br/></pre></td></tr></table></figure>
<p>为什么这里又<code>五入</code>了？</p>
<p>因为在Python 3里面，<code>round</code>对小数的精确度采用了<code>四舍六入五成双</code>的方式。</p>
<p>如果你写过大学物理的实验报告，那么你应该会记得老师讲过，直接使用四舍五入，最后的结果可能会偏高。所以需要使用<code>奇进偶舍</code>的处理方法。</p>
<p>例如对于一个小数<code>a.bcd</code>，需要精确到小数点后两位，那么就要看小数点后第三位：</p>
<ol>
<li>如果<code>d</code>小于5，直接舍去</li>
<li>如果<code>d</code>大于5，直接进位</li>
<li>如果<code>d</code>等于5：<ol>
<li><code>d</code>后面没有数据，且c为<code>偶数</code>，那么不进位，保留c</li>
<li><code>d</code>后面没有数据，且c为<code>奇数</code>，那么进位，c变成(c + 1)</li>
<li>如果<code>d</code>后面还有非0数字，例如实际上小数为<code>a.bcdef</code>，此时一定要进位，c变成(c + 1)</li>
</ol>
</li>
</ol>
<p>关于奇进偶舍，有兴趣的同学可以在维基百科搜索这两个词条：<code>数值修约</code>和<code>奇进偶舍</code>。</p>
<p>所以，<code>round</code>给出的结果如果与你设想的不一样，那么你需要考虑两个原因：</p>
<ol>
<li>你的这个小数在计算机中能不能被精确储存？如果不能，那么它可能并没有达到四舍五入的标准，例如<code>1.115</code>，它的小数点后第三位实际上是<code>4</code>，当然会被舍去。</li>
<li>如果你的这个小数在计算机中能被精确表示，那么，<code>round</code>采用的进位机制是<code>奇进偶舍</code>，所以这取决于你要保留的那一位，它是奇数还是偶数，以及它的下一位后面还有没有数据。</li>
</ol>
<h2 id="如何正确进行四舍五入"><a href="#如何正确进行四舍五入" class="headerlink" title="如何正确进行四舍五入"/>如何正确进行四舍五入</h2><p>如果要实现我们数学上的四舍五入，那么就需要使用decimal模块。</p>
<p>如何正确使用decimal模块呢？</p>
<p>看官方文档，不要看中文垃圾博客！！！</p>
<p>看官方文档，不要看中文垃圾博客！！！</p>
<p>看官方文档，不要看中文垃圾博客！！！</p>
<p>不要担心看不懂英文，Python已经推出了官方中文文档（有些函数的使用方法还没有翻译完成）。</p>
<p>我们来看一下：<a href="https://docs.python.org/zh-cn/3/library/decimal.html#decimal.Decimal.quantize" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/decimal.html#decimal.Decimal.quantize</a></p>
<p>官方文档给出了具体的写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;Decimal(<span class="string">'1.41421356'</span>).quantize(Decimal(<span class="string">'1.000'</span>))</span><br/><span class="line">Decimal(<span class="string">'1.414'</span>)</span><br/></pre></td></tr></table></figure>
<p>那么我们来测试一下，<code>0.125</code>和<code>0.375</code>分别保留两位小数是多少：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'0.125'</span>).quantize(Decimal(<span class="string">'0.00'</span>))</span><br/><span class="line">Decimal(<span class="string">'0.12'</span>)</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'0.375'</span>).quantize(Decimal(<span class="string">'0.00'</span>))</span><br/><span class="line">Decimal(<span class="string">'0.38'</span>)</span><br/></pre></td></tr></table></figure>
<p>怎么结果和<code>round</code>一样？我们来看看文档中<code>quantize</code>的函数原型和文档说明：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-27-41.png" alt=""/></p>
<p>这里提到了可以通过指定<code>rounding</code>参数来确定进位方式。如果没有指定<code>rounding</code>参数，那么默认使用上下文提供的进位方式。</p>
<p>现在我们来查看一下默认上下文中的进位方式是什么：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> getcontext</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcontext().rounding</span><br/><span class="line"><span class="string">'ROUND_HALF_EVEN'</span></span><br/></pre></td></tr></table></figure>
<p>如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-29-31.png" alt=""/></p>
<p><code>ROUND_HALF_EVEN</code>实际上就是<code>奇进偶舍</code>！如果要指定真正的四舍五入，那么我们需要在<code>quantize</code>中指定进位方式为<code>ROUND_HALF_UP</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'0.375'</span>).quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">Decimal(<span class="string">'0.38'</span>)</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'0.125'</span>).quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">Decimal(<span class="string">'0.13'</span>)</span><br/></pre></td></tr></table></figure>
<p>现在看起来一切都正常了。</p>
<p>那么会不会有人进一步追问一下，如果Decimal接收的参数不是字符串，而是浮点数会怎么样呢？</p>
<p>来实验一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"/><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">0.375</span>).quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">Decimal(<span class="string">'0.38'</span>)</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">0.125</span>).quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">Decimal(<span class="string">'0.13'</span>)</span><br/></pre></td></tr></table></figure>
<p>那是不是说明，在Decimal的第一个参数，可以直接传浮点数呢？</p>
<p>我们换一个数来测试一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="number">11.245</span>).quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">Decimal(<span class="string">'11.24'</span>)</span><br/><span class="line"><span class="meta">&gt;&gt;&gt; </span>Decimal(<span class="string">'11.245'</span>).quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">Decimal(<span class="string">'11.25'</span>)</span><br/></pre></td></tr></table></figure>
<p>为什么浮点数<code>11.245</code>和字符串<code>'11.245'</code>，传进去以后，结果不一样？</p>
<p>我们继续在文档在寻找答案。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-36-13.png" alt=""/></p>
<p>官方文档已经很清楚地说明了，如果你传入的参数为浮点数，并且这个浮点值在计算机里面不能被精确存储，那么它会先被转换为一个不精确的二进制值，然后再把这个不精确的二进制值转换为<code>等效的十进制值</code>。</p>
<p>对于不能精确表示的小数，当你传入的时候，Python在拿到这个数前，这个数就已经被转成了一个不精确的数了。所以你虽然参数传入的是<code>11.245</code>，但是Python拿到的实际上是<code>11.244999999999...</code>。</p>
<p>但是如果你传入的是字符串<code>'11.245'</code>，那么Python拿到它的时候，就能知道这是<code>11.245</code>，不会提前被转换为一个不精确的值，所以，建议给<code>Decimal</code>的第一个参数传入字符串型的浮点数，而不是直接写浮点数。</p>
<p>总结，如果想实现精确的四舍五入，代码应该这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP</span><br/><span class="line"/><br/><span class="line">origin_num = Decimal(<span class="string">'11.245'</span>)</span><br/><span class="line">answer_num = origin_num.quantize(Decimal(<span class="string">'0.00'</span>), rounding=ROUND_HALF_UP)</span><br/><span class="line">print(answer_num)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-31-10-44-23.png" alt=""/></p>
<p>特别注意，一旦要做精确计算，那么就不应该再单独使用浮点数，而是应该总是使用<code>Decimal('浮点数')</code>。否则，当你赋值的时候，精度已经被丢失了，建议全程使用Decimal举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line">a = Decimal('0.1')</span><br/><span class="line">b = Decimal('0.2')</span><br/><span class="line">c = a + b</span><br/><span class="line">print(c)</span><br/></pre></td></tr></table></figure>
<p>最后，如果有同学想知道为什么0.125和0.375能被精确的储存，而1.115、11.245不能被精确储存，请在这篇文章下面留言，如果想知道的同学多，我就写一篇文章来说明。</p>

      
    </div>

    

    
    
    

    
      