一<div class="post-body" itemprop="articleBody">

      
      

      
        <p>我们知道，Python 里面的生成器只能被消费一次，例如如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_generator</span><span class="params">()</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">'产品经理'</span>, <span class="string">'kingname'</span>]:</span><br/><span class="line">        <span class="keyword">yield</span> name</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(g)</span>:</span></span><br/><span class="line">    print(<span class="string">'hello 函数开始运行'</span>)</span><br/><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> g:</span><br/><span class="line">        print(<span class="string">'hello'</span>, name)</span><br/><span class="line">    print(<span class="string">'hello 函数运行完成'</span>)</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(g)</span>:</span></span><br/><span class="line">    print(<span class="string">'hi函数开始运行'</span>)</span><br/><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> g:</span><br/><span class="line">        print(<span class="string">'hi'</span>, name)</span><br/><span class="line">    print(<span class="string">'hi函数运行完成'</span>)</span><br/><span class="line"/><br/><span class="line">names = name_generator()</span><br/><span class="line">say_hello(names)</span><br/><span class="line">say_hi(names)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-11-04-23-13-54.png" alt=""/></p>
<p>在 <code>say_hello</code>函数里面，生成器已经被完整遍历了一次，那么在<code>say_hi</code>里面，就什么数据都拿不到了。</p>
<p>但如果我们用的是列表，就可以多次遍历，如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-11-04-23-15-26.png" alt=""/></p>
<p>大家注意观察区别。</p>
<p>那么有什么办法，能让生成器被多次完整迭代呢？这个时候就要使用<code>itertools.tee</code>这个函数了。它通过<code>dequeue</code>实现了让生成器多次消费的办法。</p>
<a id="more"/>
<p><code>itertools.tee</code>的使用方法如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">生成器<span class="number">1</span>, 生成器<span class="number">2</span>, 生成器<span class="number">3</span> = itertools.tee(原始生成器, <span class="number">3</span>)</span><br/></pre></td></tr></table></figure>
<p><code>itertools.tee</code>的第一个参数是原始生成器，第二个参数是你希望让它返回多少个可以复用的生成器。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br/><span class="line"/><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_generator</span><span class="params">()</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">'产品经理'</span>, <span class="string">'kingname'</span>]:</span><br/><span class="line">        <span class="keyword">yield</span> name</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(g)</span>:</span></span><br/><span class="line">    print(<span class="string">'hello 函数开始运行'</span>)</span><br/><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> g:</span><br/><span class="line">        print(<span class="string">'hello'</span>, name)</span><br/><span class="line">    print(<span class="string">'hello 函数运行完成'</span>)</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hi</span><span class="params">(g)</span>:</span></span><br/><span class="line">    print(<span class="string">'hi函数开始运行'</span>)</span><br/><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> g:</span><br/><span class="line">        print(<span class="string">'hi'</span>, name)</span><br/><span class="line">    print(<span class="string">'hi函数运行完成'</span>)</span><br/><span class="line"/><br/><span class="line">names = name_generator()</span><br/><span class="line">names_1, names_2 = itertools.tee(names, <span class="number">2</span>)</span><br/><span class="line">say_hello(names_1)</span><br/><span class="line">say_hi(names_2)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-11-04-23-19-45.png" alt=""/></p>
<p>但是，<code>itertools.tee</code>有两个缺陷：</p>
<p>其一是如果原始生成器能循环非常多次，产生的数据量非常大，并且你在消费的时候，是先迭代第一个分裂后的生成器，完整迭代完以后再迭代第二个分裂后的生成器，那么这将会浪费大量内存。所以，应该让两个生成器能间隔着迭代，或者“同时”迭代。</p>
<p>其二，多个生成器同时迭代也有问题，分裂出来的多个生成器不是线程安全的，在多线程里面同时运行会导致报错。</p>
<p>在接下来的两篇文章中，我会讲到<code>itertools.tee</code>是如何做到让生成器多次迭代的，然后讲到如何让分裂以后的生成器线程安全。</p>

      
    </div>

    

    
    
    

    
      