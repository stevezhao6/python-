一<div class="post-body" itemprop="articleBody">

      
      

      
        <p>在写 Python 代码的时候，大家可能会在不知不觉中使用一些设计范式。我们来看两个例子。</p>
<a id="more"/>
<p>假设有一个类<code>People</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex)</span>:</span></span><br/><span class="line">        self.name = name</span><br/><span class="line">        self.age = age</span><br/><span class="line">        self.sex = sex</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在跳舞'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在学习'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在吃东西'</span>)</span><br/></pre></td></tr></table></figure>
<p>现在我们有另一个类<code>ClassRoom</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size)</span>:</span></span><br/><span class="line">        self.size = size</span><br/><span class="line">        self.student = People(<span class="string">'小明'</span>, <span class="number">17</span>, <span class="string">'男'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_class</span><span class="params">(self)</span>:</span></span><br/><span class="line">        self.student.study()</span><br/></pre></td></tr></table></figure>
<p>我们在<code>ClassRoom</code>的构造函数中，初始化了一个 student 对象，然后在<code>start_class</code>方法中，调用了这个对象的<code>study</code>方法。</p>
<p>这个过程看起来似乎没有什么问题，相信很多读者也是这样写代码的。</p>
<p>现在，我们再增加两个类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br/><span class="line">        self.name = name</span><br/><span class="line">        self.consumer = People(<span class="string">'张三'</span>, <span class="number">30</span>, <span class="string">'男'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_launch</span><span class="params">(self)</span>:</span></span><br/><span class="line">        self.consumer.eat()</span><br/></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ballroom</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address)</span>:</span></span><br/><span class="line">        self.address = address</span><br/><span class="line">        self.dancer = People(<span class="string">'小红'</span>, <span class="number">20</span>, <span class="string">'女'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br/><span class="line">        self.dancer.dance()</span><br/></pre></td></tr></table></figure>
<p>新增加的两个类<code>Restaurant</code>和<code>Ballroom</code>的构造函数里面都通过<code>People</code>类初始化了对象。然后在调用这个对象的方法。</p>
<p>这样写看起来没有问题，能正常工作，代码也不丑。</p>
<p>现在，<code>People</code>类需要修改一下它的构造函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, address)</span>:</span></span><br/><span class="line">        self.name = name</span><br/><span class="line">        self.age = age</span><br/><span class="line">        self.sex = sex</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在跳舞'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在学习'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在吃东西'</span>)</span><br/></pre></td></tr></table></figure>
<p>在初始化<code>People</code>类时，需要传入一个<code>address</code>参数。现在怎么办？</p>
<p>于是<code>ClassRoom</code>、<code>Restaurant</code>、<code>Ballroom</code>这三个类的构造函数都要随之做修改，全都得加上这个<code>address</code>参数。</p>
<p>这就叫做<code>牵一发而动全身</code>。</p>
<p>很多人为了避免做这样的修改，会把新增加的这个参数<code>address</code>改成默认参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, sex, address=<span class="string">''</span>)</span>:</span></span><br/><span class="line">        self.name = name</span><br/><span class="line">        self.age = age</span><br/><span class="line">        self.sex = sex</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在跳舞'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在学习'</span>)</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br/><span class="line">        print(<span class="string">'我在吃东西'</span>)</span><br/></pre></td></tr></table></figure>
<p>这样看起来，另外三个类的代码就不需要做任何修改了。</p>
<blockquote>
<p>这就是为什么你们公司的代码里面，很多函数会带上大量奇奇怪怪的默认参数的原因。</p>
</blockquote>
<p>在编程范式中，有一个术语叫做<code>依赖注入</code>，就是为了解决这个问题的。</p>
<p>而且做起来简单到你觉得这是在逗你，把<code>People</code>初始化以后的对象传到其他类的构造函数中即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ballroom</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, dancer)</span>:</span></span><br/><span class="line">        self.address = address</span><br/><span class="line">        self.dancer = dancer</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br/><span class="line">        self.dancer.dance()</span><br/><span class="line"/><br/><span class="line">dancer = People(<span class="string">'小红'</span>, <span class="number">20</span>, <span class="string">'女'</span>)</span><br/><span class="line">ballroom = Ballroom(<span class="string">'xxx'</span>, dancer)</span><br/><span class="line">ballroom.open()</span><br/></pre></td></tr></table></figure>
<p>虽然叫做编程范式，但也不是说应该始终使用依赖注入。例如你的代码会层层调用，难道从第一层把对象一层一层传到最里面去？所以应该根据实际情况来进行选择。</p>

      
    </div>

    

    
    
    

    
      