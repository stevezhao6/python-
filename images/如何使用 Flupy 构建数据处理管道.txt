如<div class="post-body" itemprop="articleBody">

      
      

      
        <p>经常使用 Linux 的同学，肯定对<code>|</code>这个符号不陌生，这个符号是 Linux 的管道符号，可以把左边的数据传递给右边。</p>
<a id="more"/>
<p>例如我有一个<code>spider.log</code>文件，我想查看里面包含”ERROR”关键词，同时时间为<code>2019-11-23</code>的数据，那么我可以这样写命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">cat spider.log | grep ERROR | grep <span class="string">"2019-11-23"</span></span><br/></pre></td></tr></table></figure>
<p>但是，如果你想执行更复杂的操作，例如提取关键词<code>fail on: https://xxx.com</code>后面的这个网址，然后对所有获得的网址进行去重，那么虽然 shell 命令也能办到，但写起来却稍显麻烦。</p>
<p>这个时候，你就可以使用 Flupy来实现你的需求。首先我们使用 Python 3.6以上的版本安装<code>Flupy</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">python3 -m pip install flupy</span><br/></pre></td></tr></table></figure>
<p>然后开始写代码，看看这几步操作有多简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br/><span class="line"><span class="keyword">from</span> flupy <span class="keyword">import</span> flu</span><br/><span class="line"/><br/><span class="line"><span class="keyword">with</span> open(<span class="string">'spider.log'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br/><span class="line">    error_url = (flu(f).filter(<span class="keyword">lambda</span> x: <span class="string">'ERROR'</span> <span class="keyword">in</span> x)</span><br/><span class="line">                      .map(<span class="keyword">lambda</span> x: re.search(<span class="string">'fail on: (.*?),'</span>, x))</span><br/><span class="line">                      .filter(<span class="keyword">lambda</span> x: x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>)</span><br/><span class="line">                      .map(<span class="keyword">lambda</span> x: x.group(<span class="number">1</span>))</span><br/><span class="line">                      .unique())</span><br/><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> error_url:</span><br/><span class="line">        print(url)</span><br/></pre></td></tr></table></figure>
<p>首先<code>flu</code>接收一个可迭代对象，无论是列表还是生成器都可以。然后对里面的每一条数据应用后面的规则。这个过程都是基于生成器实现的，所以不会有内存不足的问题，对于 PB 级别的数据也不在话下。</p>
<p>在上面的例子中，<code>Flupy</code>获取日志文件的每一行内容，首先使用<code>filter</code>进行过滤，只保留包含<code>ERROR</code>字符串的行。然后对这些行通过<code>map</code>方法执行正则表达式，搜索满足<code>fail on: (.*?)\n</code>的内容。由于有些行有，有些行没有，所以这一步返回的数据有些是 None，有些是正则表达式对象，所以进一步再使用<code>filter</code>关键字，把所有返回<code>None</code>的都过滤掉。然后继续使用<code>map</code>关键字，对每一个正则表达式对象获取<code>.group(1)</code>。并把结果输出。</p>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-11-23-20-49-04.png" alt=""/></p>
<p>实现了数据的提取和去重。并且整个过程通过 Python 实现，代码也比 Shell 简单直观。</p>
<p>由于<code>Flupy</code>可以接收任何可迭代对象，所以传入数据库游标也是没有问题的，例如从 MongoDB 中读取数据并进行处理的一个例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br/><span class="line"><span class="keyword">from</span> flupy <span class="keyword">import</span> flu</span><br/><span class="line"/><br/><span class="line"/><br/><span class="line">handler = pymongo.MongoClient().db.col</span><br/><span class="line"/><br/><span class="line">cursor = handler.find()</span><br/><span class="line">data = flu(cursor).filter(<span class="keyword">lambda</span> x: x[<span class="string">'date'</span>] &gt;= <span class="string">'2019-11-10'</span>).map(<span class="keyword">lambda</span> x: x[<span class="string">'text'</span>]).take_while(<span class="keyword">lambda</span> x: <span class="string">'kingname'</span> <span class="keyword">in</span> x)</span><br/></pre></td></tr></table></figure>
<p>这一段代码的意思是说，从数据库中一行一行检查数据，如果<code>date</code>字段大于<code>2019-11-10</code>就获取<code>text</code>字段的数据，满足一条就获取一条，直到某条数据包含<code>kingname</code>为止。</p>
<p>使用<code>Flupy</code>不仅可以通过写<code>.py</code>文件实现，还可以直接在命令行中执行，例如上面读取<code>spider.log</code>的代码，可以转换为终端命令：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">flu -f spider.log <span class="string">"_.filter(lambda x: 'ERROR' in x).map(lambda x: re.search('fail on: (.*?),', x)).filter(lambda x: x is not None).map(lambda x: x.group(1)).unique()"</span> -i re</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-11-23-21-00-44.png" alt=""/></p>
<p>通过<code>-i</code> 参数导入不同的库，无论是系统自带的库或者第三方库都可以。</p>
<p>Flupy 的更多使用参数，可以参阅它的<a href="https://flupy.readthedocs.io/en/latest/welcome.html" target="_blank" rel="noopener">官方文档</a></p>

      
    </div>

    

    
    
    

    
      