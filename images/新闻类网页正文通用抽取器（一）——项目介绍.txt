新<div class="post-body" itemprop="articleBody">

      
      

      
        <h2 id="项目起源"><a href="#项目起源" class="headerlink" title="项目起源"/>项目起源</h2><p>开发这个项目，源自于我在知网发现了一篇关于自动化抽取新闻类网站正文的算法论文——<a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2019&amp;filename=GWDZ201908029&amp;v=MDY4MTRxVHJXTTFGckNVUkxPZmJ1Wm5GQ2poVXJyQklqclBkTEc0SDlqTXA0OUhiWVI4ZVgxTHV4WVM3RGgxVDM=" target="_blank" rel="noopener">《基于文本及符号密度的网页正文提取方法》</a>）</p>
<p>这篇论文中描述的算法看起来简洁清晰，并且符合逻辑。但由于论文中只讲了算法原理，并没有具体的语言实现，所以我使用 Python 根据论文实现了这个抽取器。并分别使用今日头条、网易新闻、游民星空、观察者网、凤凰网、腾讯新闻、ReadHub、新浪新闻做了测试，发现提取效果非常出色，几乎能够达到100%的准确率。</p>
<a id="more"/>
<h2 id="项目现状"><a href="#项目现状" class="headerlink" title="项目现状"/>项目现状</h2><p>在论文中描述的正文提取基础上，我增加了标题、发布时间和文章作者的自动化探测与提取功能。</p>
<p>最后的输出效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-09-08-22-02-04.png" alt=""/></p>
<p>目前这个项目是一个非常非常早期的 Demo，发布出来是希望能够尽快得到大家的使用反馈，从而能够更好地有针对性地进行开发。</p>
<p>本项目取名为<code>抽取器</code>，而不是<code>爬虫</code>，是为了规避不必要的风险，因此，本项目的输入是 HTML，输出是一个字典。请自行使用恰当的方法获取目标网站的 HTML。</p>
<p><strong>本项目现在不会，将来也不会提供主动请求网站 HTML 的功能。</strong></p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"/>如何使用</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"/>准备环境</h3><p>本项目使用 <code>Pipenv</code>管理 Python 的第三方库。如果你不知道 <code>Pipenv</code> 是什么，请<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">点我跳转</a>。</p>
<p>安装完成<code>Pipenv</code>以后，按照如下步骤运行代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kingname/GeneralNewsExtractor.git</span><br/><span class="line"><span class="built_in">cd</span> GeneralNewsExtractor</span><br/><span class="line">pipenv install</span><br/><span class="line">pipenv shell</span><br/><span class="line">python3 GeneralNewsCrawler.py</span><br/></pre></td></tr></table></figure>
<h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"/>特别说明</h3><p>项目代码中的<code>GeneralNewsCrawler.py</code>提供了本项目的基本使用示例。</p>
<ul>
<li>本项目的测试代码在<code>test</code>文件夹中</li>
<li>本项目的输入 HTML 为经过 JavaScript 渲染以后的 HTML，而不是普通的网页源代码。所以无论是后端渲染、Ajax 异步加载都适用于本项目。</li>
<li>如果你要手动测试新的目标网站或者目标新闻，那么你可以在 Chrome 浏览器中打开对应页面，然后开启<code>开发者工具</code>，如下图所示：</li>
</ul>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-09-08-22-20-33.png" alt=""/></p>
<p>在<code>Elements</code>标签页定位到<code>&lt;html&gt;</code>标签，并右键，选择<code>Copy</code>-<code>Copy OuterHTML</code>，如下图所示</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-09-08-22-21-49.png" alt=""/></p>
<ul>
<li><p>当然，你可以使用 Puppeteer/Pyppeteer、Selenium 或者其他任何方式获取目标页面的<code>JavaScript渲染后的</code>源代码。</p>
</li>
<li><p>获取到源代码以后，通过如下代码提取信息：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> GeneralNewsCrawler <span class="keyword">import</span> GeneralNewsExtractor</span><br/><span class="line"/><br/><span class="line">extractor = GeneralNewsExtractor()</span><br/><span class="line">html = <span class="string">'你的目标网页正文'</span></span><br/><span class="line">result = extractor.extract(html)</span><br/><span class="line">print(result)</span><br/></pre></td></tr></table></figure>
<p>对大多数新闻页面而言，以上的写法就能够解决问题了。</p>
<p>但某些新闻网页下面会有评论，评论里面可能存在长篇大论，它们会看起来比真正的新闻正文更像是正文，因此<code>extractor.extract()</code>方法还有一个默认参数<code>noise_mode_list</code>，用于在网页预处理时提前把评论区域整个移除。</p>
<p><code>noise_mode_list</code>的值是一个列表，列表里面的每一个元素都是 XPath，对应了你需要提前移除的，可能会导致干扰的目标标签。</p>
<p>例如，<code>观察者网</code>下面的评论区域对应的Xpath 为<code>//div[@class="comment-list"]</code>。所以在提取观察者网时，为了防止评论干扰，就可以加上这个参数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">result = extractor.extract(html, noise_node_list=[<span class="string">'//div[@class="comment-list"]'</span>])</span><br/></pre></td></tr></table></figure>
<p><code>test</code>文件夹中的网页的提取结果，请查看<code>result.txt</code>。</p>
<h2 id="项目文档"><a href="#项目文档" class="headerlink" title="项目文档"/>项目文档</h2><p><a href="https://github.com/kingname/GeneralNewsExtractor/wiki/GeneralNewsExtractor-Q&amp;A" target="_blank" rel="noopener">GNE 常见问题 Q&amp;A</a></p>
<h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"/>已知问题</h2><ol>
<li>目前本项目只适用于新闻页的信息提取。如果目标网站不是新闻页，或者是今日头条中的相册型文章，那么抽取结果可能不符合预期。</li>
<li>可能会有一些新闻页面出现抽取结果中的作者为空字符串的情况，这可能是由于文章本身没有作者，或者使用了已有正则表达式没有覆盖到的情况。</li>
</ol>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"/>Todo</h2><ul>
<li>使用一个配置文件来存放常量数据，而不是直接 Hard Code 写在代码中。</li>
<li>允许自定义时间、作者的提取Pattern</li>
<li>新闻文章列表页提取</li>
<li>对于多页的新闻，允许传入一个 HTML 列表，GNE 解析以后，自动拼接为完整的新闻正文</li>
<li>优化内容提取速度</li>
<li>测试更多新闻网站</li>
<li>……</li>
</ul>
<h2 id="交流沟通"><a href="#交流沟通" class="headerlink" title="交流沟通"/>交流沟通</h2><p>如果您觉得GNE对您的日常开发或公司有帮助，请加作者微信 mxqiuchen（或扫描下方二维码） 并注明”GNE”，作者会将你拉入群。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/IMG_3729_2.JPG" alt=""/></p>
<p>验证消息：<code>GNE</code></p>
<h2 id="论文修订"><a href="#论文修订" class="headerlink" title="论文修订"/>论文修订</h2><p>在使用 Python 实现这个抽取器的过程中，我发现论文里面的公式和方法存在一些纰漏，会导致部分节点报错。我将会单独写几篇文章来介绍这里的修改。请关注我的微信公众号：未闻Code：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/wechatplatform.jpg" alt=""/></p>

      
    </div>

    

    
    
    

    
      