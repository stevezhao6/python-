为<div class="post-body" itemprop="articleBody">

      
      

      
        <p>写过一段时间代码的同学，应该对这一句话深有体会：程序的时间利用率和空间利用率往往是矛盾的，可以用时间换空间，可以用空间换时间，但很难同时提高一个程序的时间利用率和空间利用率。</p>
<p>但如果你尝试使用生成器来重构你的代码，也许你会发现，在一定程度上，你可以既提高时间利用率，又提高空间利用率。</p>
<a id="more"/>
<p>我们以一个数据清洗的简单项目为例，来说明生成器如何让你的代码运行起来更加高效。</p>
<blockquote>
<p>在 Redis 中，有一个列表<code>datalist</code>，里面有很多的数据，这些数据可能是<code>纯阿拉伯数字</code>，<code>中文数字</code>，<code>字符串"敏感信息"</code>。现在我们需要实现：从 Redis 中读取所有的数据，把所有的字符串<code>敏感信息</code>全部丢掉，把所有中文数字全部转换为阿拉伯数字，以<code>{'num': 12345, 'date': '2019-10-30 18:12:14'}</code>这样的格式插入到 MongoDB 中。</p>
</blockquote>
<p>示例数据如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/></pre></td><td class="code"><pre><span class="line">41234213424</span><br/><span class="line">一九八八七二六三</span><br/><span class="line">8394520342</span><br/><span class="line">七二三六二九六六</span><br/><span class="line">敏感信息</span><br/><span class="line">80913408120934</span><br/><span class="line">敏感信息</span><br/><span class="line">敏感信息</span><br/><span class="line">95352345345</span><br/><span class="line">三三七四六</span><br/><span class="line">999993232</span><br/><span class="line">234234234</span><br/><span class="line">三六八八七七</span><br/><span class="line">敏感信息</span><br/></pre></td></tr></table></figure>
<p>如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-30-19-27-35.png" alt=""/></p>
<p>如果让你来写这个转换程序，你可能会这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br/><span class="line"><span class="keyword">import</span> datetime</span><br/><span class="line"><span class="keyword">import</span> pymongo</span><br/><span class="line"/><br/><span class="line"/><br/><span class="line">client = redis.Redis()</span><br/><span class="line">handler = pymongo.MongoClient().data_list.num</span><br/><span class="line"/><br/><span class="line">CHINESE_NUM_DICT = {</span><br/><span class="line">    <span class="string">'一'</span>: <span class="string">'1'</span>,</span><br/><span class="line">    <span class="string">'二'</span>: <span class="string">'2'</span>,</span><br/><span class="line">    <span class="string">'三'</span>: <span class="string">'3'</span>,</span><br/><span class="line">    <span class="string">'四'</span>: <span class="string">'4'</span>,</span><br/><span class="line">    <span class="string">'五'</span>: <span class="string">'5'</span>,</span><br/><span class="line">    <span class="string">'六'</span>: <span class="string">'6'</span>,</span><br/><span class="line">    <span class="string">'七'</span>: <span class="string">'7'</span>,</span><br/><span class="line">    <span class="string">'八'</span>: <span class="string">'8'</span>,</span><br/><span class="line">    <span class="string">'九'</span>: <span class="string">'9'</span></span><br/><span class="line">}</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br/><span class="line">    datas = []</span><br/><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br/><span class="line">        data = client.lpop(<span class="string">'datalist'</span>)</span><br/><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br/><span class="line">            <span class="keyword">break</span></span><br/><span class="line">        datas.append(data.decode())</span><br/><span class="line">    <span class="keyword">return</span> datas</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_sensitive_data</span><span class="params">(datas)</span>:</span></span><br/><span class="line">    clear_data = []</span><br/><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br/><span class="line">        <span class="keyword">if</span> data == <span class="string">'敏感信息'</span>:</span><br/><span class="line">            <span class="keyword">continue</span></span><br/><span class="line">        clear_data.append(data)</span><br/><span class="line">    <span class="keyword">return</span> clear_data</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranfer_chinese_num</span><span class="params">(datas)</span>:</span></span><br/><span class="line">    number_list = []</span><br/><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br/><span class="line">        <span class="keyword">try</span>:</span><br/><span class="line">            num = int(data)</span><br/><span class="line">        <span class="keyword">except</span> ValueError:</span><br/><span class="line">            num = <span class="string">''</span>.join(CHINESE_NUM_DICT[x] <span class="keyword">for</span> x <span class="keyword">in</span> data)</span><br/><span class="line">        number_list.append(num)</span><br/><span class="line">    <span class="keyword">return</span> number_list</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(number_list)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br/><span class="line">        data = {<span class="string">'num'</span>: number, <span class="string">'date'</span>: datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)}</span><br/><span class="line">        handler.insert_one(data)</span><br/><span class="line"/><br/><span class="line">raw_data = get_data()</span><br/><span class="line">safe_data = remove_sensitive_data(raw_data)</span><br/><span class="line">number_list = tranfer_chinese_num(safe_data)</span><br/><span class="line">save_data(number_list)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-30-19-45-36.png" alt=""/></p>
<p>这段代码，看起来很 Pythonic，一个函数只做一件事，看起来也满足编码规范。最后运行结果也正确。能有什么问题？</p>
<p>问题在于，这段代码，每个函数都会创建一个列表存放处理以后的数据。如果 Redis 中的数据多到超过了你当前电脑的内存怎么办？对同一批数据多次使用 for 循环，浪费了大量的时间，能不能只循环一次？</p>
<p>也许你会说，你可以把移除<code>敏感信息</code>，中文数字转阿拉伯数字的逻辑全部写在<code>get_data</code>函数的 <code>while</code>循环中，这样不就只循环一次了吗？</p>
<p>可以是可以，但是这样一来，<code>get_data</code>就做了不止一件事情，代码也显得非常混乱。如果以后要增加一个新的数据处理逻辑：</p>
<blockquote>
<p>转换为数字以后，检查所有奇数位的数字相加之和与偶数位数字相加之和是否相等，丢弃所有相等的数字。</p>
</blockquote>
<p>那么你就要修改<code>get_data</code>的代码。</p>
<p>在开发软件的时候，我们应该面向扩展开放，面向修改封闭，所以不同的逻辑，确实应该分开，所以上面把每个处理逻辑分别写成函数的写法，在软件工程上没有问题。但是如何做到处理逻辑分开，又不需要对同一批数据进行多次 for 循环呢？</p>
<p>这个时候，就要依赖于我们的生成器了。</p>
<p>我们先来看看下面这一段代码的运行效果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_num</span><span class="params">()</span>:</span></span><br/><span class="line">    nums = []</span><br/><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br/><span class="line">        print(<span class="string">f'生成数据：<span class="subst">{i}</span>'</span>)</span><br/><span class="line">        nums.append(i)</span><br/><span class="line">    <span class="keyword">return</span> nums</span><br/><span class="line">nums = gen_num()</span><br/><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br/><span class="line">    print(<span class="string">f'打印数据：<span class="subst">{num}</span>'</span>)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-30-20-04-14.png" alt=""/></p>
<p>现在，我们对代码做一下修改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_num</span><span class="params">()</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br/><span class="line">        print(<span class="string">f'生成数据：<span class="subst">{i}</span>'</span>)</span><br/><span class="line">        <span class="keyword">yield</span> i</span><br/><span class="line">nums = gen_num()</span><br/><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br/><span class="line">    print(<span class="string">f'打印数据：<span class="subst">{num}</span>'</span>)</span><br/></pre></td></tr></table></figure>
<p>其运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-30-20-05-33.png" alt=""/></p>
<p>大家对比上面两张插图。前一张插图，先生成10个数据，然后再打印10个数据。后一张图，生成一个数据，打印一个数据，再生成一个数据，再打印一个数据……</p>
<p>如果以代码的行号来表示运行运行逻辑，那么代码是按照这个流程运行的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">1-&gt;5-&gt;6-&gt;2-&gt;3-&gt;4-&gt;6-&gt;7-&gt;6-&gt;2-&gt;3-&gt;4-&gt;6-&gt;7-&gt;6-&gt;2-&gt;3-&gt;4-&gt;6-&gt;7....</span><br/></pre></td></tr></table></figure>
<p>大家可以把这段代码写在 PyCharm 中，然后使用单步调试来查看它每一步运行的是哪一行代码。</p>
<p>程序运行到<code>yield</code>就会把它后面的数字<code>抛出</code>到外面给 for 循环， 然后进入外面 for 循环的循环体，外面的 for 循环执行完成后，又会进入<code>gen_num</code>函数里面的 <code>yield i</code>后面的一行，开启下一次 for 循环，继续生成新的数字……</p>
<p>整个过程中，不需要额外创建一个列表来保存中间的数据，从而达到节约内存空间的目的。而整个过程中，虽然代码写了两个 for 循环，但是如果你使用单步调试，你就会发现实际上真正的循环只有<code>for i in range(10)</code>。而外面的<code>for num in nums</code>仅仅是实现了函数内外的切换，并没有新增循环。</p>
<p>回到最开始的问题，我们如何使用生成器来修改代码呢？实际上你几乎只需要把<code>return 列表</code>改成<code>yield 每一个元素</code>即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br/><span class="line"><span class="keyword">import</span> datetime</span><br/><span class="line"><span class="keyword">import</span> pymongo</span><br/><span class="line"/><br/><span class="line"/><br/><span class="line">client = redis.Redis()</span><br/><span class="line">handler = pymongo.MongoClient().data_list.num_yield</span><br/><span class="line"/><br/><span class="line">CHINESE_NUM_DICT = {</span><br/><span class="line">    <span class="string">'一'</span>: <span class="string">'1'</span>,</span><br/><span class="line">    <span class="string">'二'</span>: <span class="string">'2'</span>,</span><br/><span class="line">    <span class="string">'三'</span>: <span class="string">'3'</span>,</span><br/><span class="line">    <span class="string">'四'</span>: <span class="string">'4'</span>,</span><br/><span class="line">    <span class="string">'五'</span>: <span class="string">'5'</span>,</span><br/><span class="line">    <span class="string">'六'</span>: <span class="string">'6'</span>,</span><br/><span class="line">    <span class="string">'七'</span>: <span class="string">'7'</span>,</span><br/><span class="line">    <span class="string">'八'</span>: <span class="string">'8'</span>,</span><br/><span class="line">    <span class="string">'九'</span>: <span class="string">'9'</span></span><br/><span class="line">}</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br/><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br/><span class="line">        data = client.lpop(<span class="string">'datalist'</span>)</span><br/><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br/><span class="line">            <span class="keyword">break</span></span><br/><span class="line">        <span class="keyword">yield</span> data.decode()</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_sensitive_data</span><span class="params">(datas)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br/><span class="line">        <span class="keyword">if</span> data == <span class="string">'敏感信息'</span>:</span><br/><span class="line">            <span class="keyword">continue</span></span><br/><span class="line">        <span class="keyword">yield</span> data</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranfer_chinese_num</span><span class="params">(datas)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br/><span class="line">        <span class="keyword">try</span>:</span><br/><span class="line">            num = int(data)</span><br/><span class="line">        <span class="keyword">except</span> ValueError:</span><br/><span class="line">            num = <span class="string">''</span>.join(CHINESE_NUM_DICT[x] <span class="keyword">for</span> x <span class="keyword">in</span> data)</span><br/><span class="line">        <span class="keyword">yield</span> num</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(number_list)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br/><span class="line">        data = {<span class="string">'num'</span>: number, <span class="string">'date'</span>: datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)}</span><br/><span class="line">        handler.insert_one(data)</span><br/><span class="line"/><br/><span class="line">raw_data = get_data()</span><br/><span class="line">safe_data = remove_sensitive_data(raw_data)</span><br/><span class="line">number_list = tranfer_chinese_num(safe_data)</span><br/><span class="line">save_data(number_list)</span><br/></pre></td></tr></table></figure>
<p>代码如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-10-30-20-21-57.png" alt=""/></p>
<p>如果你开启 PyCharm 调试模式，你会发现，数据的流向是这样的：</p>
<ol>
<li>从 Redis 获取1条数据</li>
<li>这一条数据传给remove_sensitive_data</li>
<li>第2步处理以后的数据传给tranfer_chinese_num</li>
<li>第3步处理以后，传给 save_data</li>
<li>回到第1步</li>
</ol>
<p>整个过程就像是一条流水线一样，数据一条一条地进行处理和存档。不需创建额外的列表，有多少条数据就循环多少次，不做多余的循环。</p>

      
    </div>

    

    
    
    

    
      