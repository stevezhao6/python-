回<div class="post-body" itemprop="articleBody">

      
      

      
        <p>知乎用户<a href="https://www.zhihu.com/people/li-zhe-ao/posts" target="_blank" rel="noopener">@Manjusaka
</a>在阅读了我的文章<a href="https://zhuanlan.zhihu.com/p/70680488" target="_blank" rel="noopener">《Python正则表达式，请不要再用re.compile了！！！》</a>以后，写了一篇驳文<a href="https://zhuanlan.zhihu.com/p/78265675" target="_blank" rel="noopener">《驳 &lt;Python正则表达式，请不要再用re.compile了！！！&gt;》</a></p>
<p>今天，我在这里回应一下这篇驳文。首先标题里面，我用的是<code>回</code>，意为回复，而不是继续驳斥@Manjusaka的文章。因为没有什么好驳斥的，他的观点没有什么问题。</p>
<p>首先说明，我自己在公司的代码里面，也会使用<code>re.compile</code>。但是，我现在仍然坚持我的观点，让看这篇文章的人，不要用<code>re.compile</code>。</p>
<a id="more"/>
<h2 id="你真的在意这点性能？"><a href="#你真的在意这点性能？" class="headerlink" title="你真的在意这点性能？"/>你真的在意这点性能？</h2><p>在公司里面，我使用<code>re.compile</code>的场景是这样的：</p>
<p>每两小时从10亿条字符串中，筛选出所有不符合特定正则表达式的字符串。</p>
<p>这个程序可以简化为如下结构：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br/><span class="line">regex_list = [<span class="string">'恭喜玩家：(.*?)获得'</span>, <span class="string">'欢迎(.*?)回家'</span>, <span class="string">'组队三缺一'</span>]</span><br/><span class="line">sentence_list = [<span class="string">'字符串1'</span>, <span class="string">'字符串2'</span>, ..., <span class="string">'字符串10亿'</span>]</span><br/><span class="line">useful_sentence = []</span><br/><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> sentence_list:</span><br/><span class="line">    <span class="keyword">for</span> regex <span class="keyword">in</span> regex_list:</span><br/><span class="line">        <span class="keyword">if</span> re.search(regex, sentence):</span><br/><span class="line">            <span class="keyword">break</span></span><br/><span class="line">    <span class="keyword">else</span>:</span><br/><span class="line">        useful_sentence.append(sentence)</span><br/></pre></td></tr></table></figure>
<p>在这个场景下面，对于10亿个字符串，3个正则表达式，需要循环30亿次。虽然读取正则表达式缓存的时间很短，假设只有1毫秒，那么也会浪费833小时。为了实现2小时内处理10亿条数据，我做了很多优化，其中之一就是提前<code>re.compile</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br/><span class="line">regex_list = [<span class="string">'恭喜玩家：(.*?)获得'</span>, <span class="string">'欢迎(.*?)回家'</span>, <span class="string">'组队三缺一'</span>]</span><br/><span class="line">sentence_list = [<span class="string">'字符串1'</span>, <span class="string">'字符串2'</span>, ..., <span class="string">'字符串10亿'</span>]</span><br/><span class="line">compiled_regex_list = [re.compile(x) <span class="keyword">for</span> x <span class="keyword">in</span> regex_list]</span><br/><span class="line">useful_sentence = []</span><br/><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> sentence_list:</span><br/><span class="line">    <span class="keyword">for</span> regex <span class="keyword">in</span> compiled_regex_list:</span><br/><span class="line">        <span class="keyword">if</span> regex.search(sentence):</span><br/><span class="line">            <span class="keyword">break</span></span><br/><span class="line">    <span class="keyword">else</span>:</span><br/><span class="line">        useful_sentence.append(sentence)</span><br/></pre></td></tr></table></figure>
<p>在这样的场景下，这样的数据量级下面，你是用<code>re.compile</code>，当然可以。</p>
<p>然而，你日常接触到的工作，都是这个量级吗？知乎上流行一句话：</p>
<blockquote>
<p>抛开剂量谈毒性，都是耍流氓。</p>
</blockquote>
<p>同样的，在数据处理上也适用：</p>
<blockquote>
<p>抛开量级谈性能差异，都是耍流氓</p>
</blockquote>
<p>处理几百条数据，还需要担心读取缓存字典的这点小小的性能开销？</p>
<p>我在另一篇文章<a href="https://zhuanlan.zhihu.com/p/73426505" target="_blank" rel="noopener">为什么Python 3.6以后字典有序并且效率更高？</a>中提到，从Python 3.6开始，字典不会再提前申请更多空间了，同时也变得有序了，作为代价就是从字典读取值的过程多了一步。多出来的这一步实际上也会有性能开销，因为它需要先查询<code>indices</code>，然后再查询<code>entries</code>。为什么Python愿意放弃性能而要让字典有序？因为新的实现方式，在整体迭代、空间利用率上面都更高。</p>
<h2 id="维护自文档性"><a href="#维护自文档性" class="headerlink" title="维护自文档性"/>维护自文档性</h2><p>回到正则表达式的例子来，Python区别于其他语言的一个非常重要的点是什么？是它的自文档性。</p>
<p>网上有这样一个段子：</p>
<blockquote>
<p>问：如何把伪代码改写为Python代码？<br/>答：把.txt改成.py即可。</p>
</blockquote>
<p>Python的自文档性非常好，即便完全不懂编程的人，看到Python的代码，也能猜的出代码想实现什么功能。</p>
<p>请大家对比下面两种写法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">'密码: (.*?)$'</span>, sentence)</span><br/></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line">regex = re.compile(<span class="string">'密码: (.*?)$'</span>)</span><br/><span class="line">regex.findall(sentence)</span><br/></pre></td></tr></table></figure>
<p>如果让一个完全不会编程的人来看，他看到第一段代码，会猜测：“findall是查找全部，这段代码可能是要从sentence找什么东西”。</p>
<p>而如果让他看第二段代码，他肯定会先问一句：“compile？编译？什么是编译？编写翻译吗？”</p>
<p>而对于刚刚学编程的人来说，如果他看的Python正则表达式入门的文档里面用了<code>re.compile</code>，他也会很疑惑，为什么要<code>compile</code>？编译成了什么东西？为什么不能直接查询？于是新人可能会过早去研究底层的东西。</p>
<p>但如果他看的文章直接是<code>re.findall</code>，那么语义非常明确：<code>正则表达式.查询所有</code>，一目了然，轻轻松松就能理解并学会。</p>
<h2 id="以官方文档的实例入门"><a href="#以官方文档的实例入门" class="headerlink" title="以官方文档的实例入门"/>以官方文档的实例入门</h2><p>当我们学习一门新的语言的时候，第一应该参考的就是它的官方文档。在正则表达式官方文档<a href="https://docs.python.org/3/library/re.html#finding-all-adverbs" target="_blank" rel="noopener">https://docs.python.org/3/library/re.html#finding-all-adverbs</a>的例子中，无论是<code>search</code>还是<code>findall</code>都是使用<code>re.xxx</code>的形式。如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-08-17-22-57-21.png" alt=""/></p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-08-17-22-57-43.png" alt=""/></p>
<p>所以网上那些首先使用<code>pattern = re.compile</code>，再<code>pattern.xxx</code>的人，要不就是直接从其他语言把先<code>compile</code>再查询的思维定势带到了Python中，要不就是做正则表达式调优做太久了，思维僵化了，一抬手就是<code>re.compile</code>。</p>
<h2 id="面向接口编程还是面向人类编程？"><a href="#面向接口编程还是面向人类编程？" class="headerlink" title="面向接口编程还是面向人类编程？"/>面向接口编程还是面向人类编程？</h2><p>在我文章的评论里面，有人说，应该面向接口编程，而不是面向实现编程。</p>
<p>对这些人，我想跟你们讲：你们对面向接口编程，理解得太狭隘了！</p>
<p>我们来看看，在Python著名的http库<code>requests</code>出来之前，使用<code>urllib2</code>发起一个请求是怎么写的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br/><span class="line">gh_url = <span class="string">'https://api.github.com'</span></span><br/><span class="line">req = urllib2.Request(gh_url)</span><br/><span class="line">password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()</span><br/><span class="line">password_manager.add_password(<span class="literal">None</span>, gh_url, <span class="string">'user'</span>, <span class="string">'pass'</span>)</span><br/><span class="line">auth_manager = urllib2.HTTPBasicAuthHandler(password_manager)</span><br/><span class="line">opener = urllib2.build_opener(auth_manager)</span><br/><span class="line">urllib2.install_opener(opener)</span><br/><span class="line">handler = urllib2.urlopen(req)</span><br/></pre></td></tr></table></figure>
<p>有了<code>requests</code>以后，实现同样的功能，我们是这样写的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br/><span class="line"/><br/><span class="line">r = requests.get(<span class="string">'https://api.github.com'</span>, auth=(<span class="string">'user'</span>, <span class="string">'pass'</span>))</span><br/></pre></td></tr></table></figure>
<p>大家自己品位一下，<code>req = urllib2.Request(gh_url)</code>如果类比为<code>pattern = re.compile('xxxx')</code>，<code>handler = urllib2.urlopen(req)</code>类比为<code>pattern.findall(sentence)</code> 那么，<code>requests.get(xxx)</code>就是<code>re.findall</code>。</p>
<p>为什么我们现在愿意使用<code>requests</code>而不愿意使用<code>urllib2</code>？</p>
<p>因为<code>requests</code>是<strong>for human</strong>，而<code>urllib</code>是<code>for interface</code>.</p>
<h2 id="不是问题的问题"><a href="#不是问题的问题" class="headerlink" title="不是问题的问题"/>不是问题的问题</h2><p>在评论里面，竟然有人质疑我使用<code>re.findall</code>，正则表达式不好维护？</p>
<p>@Manjusaka竟然举出了下面这样的例子：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-08-17-23-24-58.png" alt=""/></p>
<p>为什么使用<code>re.findall</code>，就一定要把正则表达式复制粘贴很多遍？</p>
<p>我单独定义一个文件不行吗：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment"># regex_str.py</span></span><br/><span class="line"/><br/><span class="line">NAME_REGEX = <span class="string">'name:(.*?),'</span></span><br/><span class="line">AGE_REGEX = <span class="string">'age:(\d+)'</span></span><br/><span class="line">ADDRESS_REGEX = <span class="string">'address:(.*?),'</span></span><br/></pre></td></tr></table></figure>
<p>然后我要使用正则表达式的地方直接导入进来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br/><span class="line"><span class="keyword">import</span> regex_str</span><br/><span class="line"/><br/><span class="line">name = re.findall(regex_str.NAME_REGEX, sentence)</span><br/><span class="line">age = re.findall(regex_str.AGE_REGEX, sentence)</span><br/></pre></td></tr></table></figure>
<p>请问哪里不好维护了？根本不会出现@Manjusaka说的那种情况。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"/>总结</h2><p>我的观点如下：</p>
<ol>
<li>re.compile很重要，也有用。但是大多数时候你不需要使用它。</li>
<li>对于初学者，请直接使用<code>re.findall</code> <code>re.search</code>，不要使用<code>re.compile</code>。</li>
<li>对于有经验的工程师，在开发项目的时候，请首先使用<code>re.findall</code> <code>re.search</code>等等上层函数，直到你需要考虑优化正则表达式查询性能的时候，再考虑先<code>re.compile</code>。因为很多时候，你的代码性能，还不至于需要靠几行<code>re.compile</code>来提高。</li>
<li>有人问正则表达式默认缓存512条，这个数字没有写在文档里面，如果哪天改了怎么办？我的回答是：看看你写过的代码，涉及到的正则表达式有几次超过了100条？</li>
<li>正则表达式基于DFA，在它的原理上，compile这一步确实是必需的。但这并不意味着，在写代码的时候，我们一定要自己手动写compile. 毕竟封装、抽象才是高级语言的一大特征，直接。在其他编程语言里面，没有把compile和查询封装成一个整体接口，但是在Python里面这样做了。那么我们就应该用这个更上层的接口。而不是手动compile再查询。</li>
<li>为什么Java程序员常常加班，而Python程序员常常提前完成任务？正是因为这种Language Specific的特性提高了生产效率，屏蔽了前期不需要太早关心的实现细节。如果抱着写代码要语言无关，要通用而故意放弃了一些语言特性，那为什么不直接写1010？那才是真正的语言无关，所有语言都是建立于二进制的1010上的。</li>
</ol>
<h2 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"/>多说一句</h2><p>以下内容与本次讨论的re.compile无关。</p>
<p>@Manjusaka给出了一个compile需要3秒钟的大型正则表达式，并以此作为例子说明re.compile的合理性。</p>
<p>首先这种情况下，确实需要提前re.compile。</p>
<p>但我所想表达的是，在这种情况下，就不应该使用正则表达式。既然要做Redis的语法校验，那么就应该使用有限状态机。这种使用很多的f表达式拼出来的正则表达式，才是真正的难以维护，难以阅读。</p>
<p>否则为什么里面需要用一个csv文件来存放命令呢？为什么不直接写在正则表达式里面呢？使用CSV文件每行一个命令尚且可以理解，但是<code>SLOT</code>/<code>SLOTS</code>/<code>NODE</code>/<code>NEWKWY</code>这些正则表达式，可就说不过去了。或条件连接的每一段都要加上这些东西，如果直接写进去，这个正则表达式你们自己都看不下去了，所以才会需要使用拼接的方式生成。</p>
<p>我在读这段代码的时候，首先看到正则表达式里面的<code>t[xxx]</code>，会先去找<code>t</code>是什么东西，发现t是一个字典，字典是在<code>commands_csv_loader.py</code>中生成的，然后去到这个文件里面，发现它读的是一个存放Redis命令的CSV文件。然后去项目根目录读取这个csv文件的内容，知道了它的结构，于是推测出t的结构。然后再回到正则表达式里面，继续看这个超大的正则表达式。整个过程会非常费时间和脑子。</p>
<p>但是，我又不能直接打印REDIS_COMMANDS这个变量，因为它多且乱，不同命令长短不一，拼出来以后再打印出来根本没法看。</p>
<p>这个正则表达式只有两位维护者知道什么意思，如果别人想贡献新的Redis命令，那么理解这个超大正则表达式都需要花很久的时间。</p>
<p>如果换成有限状态机，并且t使用Python的data class来表示，而不是使用字典，那么就会简洁很多。有限状态机的一个特点是，只需要关注当前状态、转移条件和目标状态，可能一开始写起来有点麻烦，但是以后维护和新增，都是直接定位目标，直接修改，不用担心会影响不想干的其他地方。</p>
<p>算上维护时间，正则表达式真是一个非常糟糕的方式。</p>

      
    </div>

    

    
    
    

    
      