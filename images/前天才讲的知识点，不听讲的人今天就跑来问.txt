前<div class="post-body" itemprop="articleBody">

      
      

      
        <p> 今天在读者交流群里面，有同学提到这样一个问题：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2021-04-06-20-32-34.png" alt=""/></p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2021-04-06-20-32-51.png" alt=""/></p>
<p>这个同学想实现，在代码第35行，如果进入了 <code>if</code> 判断，那么就退出第40-43行对应的 ac 函数。</p>
<p>能问出这个问题，说明这个同学显然没有认真看我的微信公众号。就在几天前我才发了一篇文章：<a href="https://mp.weixin.qq.com/s/po6wGCF_Ww8xDJKgEywZ0g" target="_blank" rel="noopener">一日一技：Python多线程的事件监控</a>。使用这篇文章里面讲到的方法，就可以轻易实现他的需求。</p>
<p>在那篇文章中，我们讲到了<code>threading.Event</code>，这个东西不仅可以在线程之间使用，也可以在主线程和子线程之间使用。</p>
<a id="more"/>
<p>这个同学的代码不够清晰，我们稍稍修改一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br/><span class="line"><span class="keyword">import</span> threading</span><br/><span class="line"><span class="keyword">import</span> datetime</span><br/><span class="line"/><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monitor</span><span class="params">(threading.Thread)</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, endtime)</span>:</span></span><br/><span class="line">        super().__init__()</span><br/><span class="line">        print(<span class="string">'ac 函数将会在：'</span>, endtime, <span class="string">'停止'</span>)</span><br/><span class="line">        self.endtime = endtime</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br/><span class="line">            now = datetime.datetime.now()</span><br/><span class="line">            <span class="keyword">if</span> now &gt; self.endtime:</span><br/><span class="line">                print(<span class="string">'结束主线程'</span>)</span><br/><span class="line">                <span class="comment"># <span class="doctag">TODO:</span> 这里需要做点什么事情</span></span><br/><span class="line">            time.sleep(<span class="number">1</span>)</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ac</span><span class="params">()</span>:</span></span><br/><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br/><span class="line">        print(<span class="string">'主线程正在运行，现在时间'</span>, datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br/><span class="line">        time.sleep(<span class="number">5</span>)</span><br/><span class="line"/><br/><span class="line"/><br/><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br/><span class="line">    stop_time = datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">60</span>)</span><br/><span class="line">    monitor = Monitor(stop_time)</span><br/><span class="line">    monitor.start()</span><br/><span class="line">    ac()</span><br/></pre></td></tr></table></figure>
<p>如果你直接运行上面这段代码，你会发现程序每5秒钟会通过<code>ac</code>函数打印一条字符串，但永远不会停止。现在，我们在 需要在<code>#TODO</code>的位置怎么写代码，才能让程序停止呢？这个时候，我们把<code>threading.Event</code>引入进来。在外面生成并传给子线程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br/><span class="line"><span class="keyword">import</span> threading</span><br/><span class="line"><span class="keyword">import</span> datetime</span><br/><span class="line"/><br/><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monitor</span><span class="params">(threading.Thread)</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, endtime, event)</span>:</span></span><br/><span class="line">        super().__init__()</span><br/><span class="line">        self.endtime = endtime</span><br/><span class="line">        print(<span class="string">'ac 函数将会在：'</span>, endtime, <span class="string">'停止'</span>)</span><br/><span class="line">        self.event = event</span><br/><span class="line"/><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br/><span class="line">            now = datetime.datetime.now()</span><br/><span class="line">            <span class="keyword">if</span> now &gt; self.endtime:</span><br/><span class="line">                print(<span class="string">'结束主线程'</span>)</span><br/><span class="line">                self.event.set()</span><br/><span class="line">                <span class="keyword">return</span></span><br/><span class="line">            time.sleep(<span class="number">1</span>)</span><br/><span class="line"/><br/><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ac</span><span class="params">(event)</span>:</span></span><br/><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> event.is_set():</span><br/><span class="line">        print(<span class="string">'主线程正在运行，现在时间'</span>, datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br/><span class="line">        time.sleep(<span class="number">5</span>)</span><br/><span class="line"/><br/><span class="line"/><br/><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br/><span class="line">    event = threading.Event()</span><br/><span class="line">    stop_time = datetime.datetime.now() + datetime.timedelta(seconds=<span class="number">60</span>)</span><br/><span class="line">    monitor = Monitor(stop_time, event)</span><br/><span class="line">    monitor.start()</span><br/><span class="line">    ac(event)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2021-04-06-20-59-47.png" alt=""/></p>
<p>当子线程检测到满足结束条件的时候，调用<code>event.set()</code>。主线程里面，<code>ac</code>函数使用一个循环不停检测<code>event.is_set()</code>。一开始<code>event.is_set()</code>始终返回 <code>False</code>，直到<code>event.set()</code>以后，就返回 True。这样一来，<code>ac</code>函数就像是收到了通知，于是可以结束函数的运行了。</p>
<p>如果大家有任何编程上的问题，可以进入未闻 Code 读者交流微信群提问。目前交流群一群、二群已经慢了，三群正在等待更多同学的加入。加我微信号<code>mekingname</code>，备注<code>粉丝群</code>就可以进入。</p>

      
    </div>

    

    
    
    

    
      