使<div class="post-body" itemprop="articleBody">

      
      

      
        <p>在Python中，如果要判断一个字符串是否在另一个字符串里面，我们可以使用<code>in</code>关键字，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = '你说我是买苹果电脑，还是买windows电脑呢？'</span><br/><span class="line">&gt;&gt;&gt; if '苹果' in a:</span><br/><span class="line">...  print('苹果这个词在a字符串里面')</span><br/><span class="line">...</span><br/><span class="line">苹果这个词在a字符串里面</span><br/></pre></td></tr></table></figure>
<p>如果有多个句子和多个关键字，那么可以使用<code>for</code>循环来实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/></pre></td><td class="code"><pre><span class="line">sentences = [<span class="string">'你说我是买苹果电脑，还是买windows电脑呢？'</span>, </span><br/><span class="line">             <span class="string">'人生苦短我用Python'</span>, </span><br/><span class="line">             <span class="string">'你TM一天到晚只知道得瑟'</span>,</span><br/><span class="line">             <span class="string">'不不不，我不是说你，我是说在座的各位都是垃圾。'</span></span><br/><span class="line">             <span class="string">'我CNM你个大SB'</span></span><br/><span class="line">            ]</span><br/><span class="line">keywords = [<span class="string">'垃圾'</span>, <span class="string">'CNM'</span>, <span class="string">'SB'</span>, <span class="string">'TM'</span>]</span><br/><span class="line"><span class="keyword">for</span> sentence <span class="keyword">in</span> sentences:</span><br/><span class="line">    <span class="keyword">for</span> keyword <span class="keyword">in</span> keywords:</span><br/><span class="line">        <span class="keyword">if</span> keyword <span class="keyword">in</span> sentence:</span><br/><span class="line">            print(<span class="string">f'句子: 【<span class="subst">{sentence}</span>】包含脏话：【<span class="subst">{keyword}</span>】'</span>)</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-02-12-18-39.png" alt=""/></p>
<p>现在如果有100000000个句子，有1000个关键字，那么你需要对比1000亿次才能全部查询完成。这个时间代价太大了，如果Python一秒钟能运行500万次查询（实际上没有这么快），那么1000亿次查询需要20000秒，接近6小时。而且，由于<code>in</code>关键字的时间复杂度为<code>O(n)</code>，如果有大量长句子，查询时间会更长。</p>
<a id="more"/>
<p>例如，我们要从下面的句子里面寻找<code>CNM</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/></pre></td><td class="code"><pre><span class="line">sentences = ['你说我是买苹果电脑，还是买windows电脑呢？', </span><br/><span class="line">             '人生苦短我用Python', </span><br/><span class="line">             '你TM一天到晚只知道得瑟',</span><br/><span class="line">             '不不不，我不是说你，我是说在座的各位都是垃圾。',</span><br/><span class="line">             '我CNM你个大SB',</span><br/><span class="line">             '各位同学，Good Morning！',</span><br/><span class="line">             '网络这个单词，它的英文为Network',</span><br/><span class="line">             '我不想听到有人说CNM！'</span><br/><span class="line">            ]</span><br/></pre></td></tr></table></figure>
<p>如果使用常规方法，那么我们的做法是：</p>
<ol start="0">
<li><code>CNM</code>在<code>你说我是买苹果电脑，还是买windows电脑呢？</code>中吗？不在！</li>
<li><code>CNM</code>在<code>人生苦短我用Python</code>吗？不在！</li>
<li>……</li>
<li>……</li>
<li><code>CNM</code>在<code>我CNM你个大SB</code>吗？<strong>在</strong>！</li>
<li><code>CNM</code>在<code>各位同学，Good Morning！</code>吗？不在！</li>
<li><code>CMN</code>在<code>网络这个单词，它的英文为Network</code>吗？不在！</li>
<li><code>CNM</code>在<code>我不想听到有人说CNM！</code>吗？<strong>在</strong>！</li>
</ol>
<p>于是就知道了，<code>CNM</code>在sentences列表下标为4和7的这两个句子中。</p>
<p>下面，我们换一个看起来更笨的办法：</p>
<p>要找到<code>CNM</code>在哪几句里面，可以变成：寻找<code>C</code>、<code>N</code>、<code>M</code>这三个字母在哪几句里面。然后，再找到同时有这三个字母的句子:</p>
<ol>
<li><code>C</code>在4, 7句</li>
<li><code>N</code>在4，6，7句</li>
<li><code>M</code>在2, 4，5，7句</li>
</ol>
<p>所以，{4, 7} 与 {4, 6, 7} 与 {4, 5, 7}做交集，得到{4, 7}说明<code>CNM</code>这个词很有可能是在第4句和第7句。</p>
<p>为什么说很可能呢？因为假如再添加一句话：<code>今天我们学习三个单词：Cat, Network, Morning</code>。这一句也会被认为包含<code>CNM</code>这个词，但实际上它只是同时包含了<code>C</code>、<code>N</code>、<code>M</code>三个字母而已。</p>
<p>接下来，有人会问了：原来直接查询<code>CNM</code>的时候，只需要查询8次就可以了。现在你分别查询<code>C</code> <code>N</code> <code>M</code>要查询24次。你是修复了查询时间太短的bug吗？</p>
<p>回答这个问题之前，我们再来看另一个问题。</p>
<p>Python里面，当我要判断字母<code>C</code>是不是在句子<code>我不想听到有人说CNM！</code>里面时，Python是如何工作的？</p>
<p>实际上，它的工作原理可以写成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line">sentence = <span class="string">'我不想听到有人说CNM！'</span></span><br/><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> sentence:</span><br/><span class="line">    <span class="keyword">if</span> char == <span class="string">'C'</span>:</span><br/><span class="line">        print(<span class="string">'C在这个字符串中'</span>)</span><br/><span class="line">        <span class="keyword">break</span></span><br/></pre></td></tr></table></figure>
<p>如果要判断<code>C</code>、<code>N</code>、<code>M</code>是不是都在这个字符串<code>我不想听到有人说CNM！</code>中，同一个字符串会被遍历3次。有没有办法减少这种看起来多余的遍历操作呢？</p>
<p>如果我们把<code>我不想听到有人说CNM！</code>这个句子转成字典会怎么样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line">sentence = '我不想听到有人说CNM！'</span><br/><span class="line">sentence_dict = {char: 1 for char in sentence}</span><br/><span class="line">for letter in 'CNM':</span><br/><span class="line">    if letter in sentence_dict:</span><br/><span class="line">        print(f'字母{letter}在句子中！')</span><br/></pre></td></tr></table></figure>
<p>这样一来，只需要在生成字典的时候遍历句子一次，减少了2次冗余遍历。并且，判断一个元素是否在字典里面，时间复杂度为<code>O(1)</code>，速度非常快。</p>
<p><code>我不想听到有人说CNM！</code>生成的字典为<code>{'我': 1, '不': 1, '想': 1, '听': 1, '到': 1, '有': 1, '人': 1, '说': 1, 'C': 1, 'N': 1, 'M': 1, '！': 1}</code>。那么如果要把列表里面的所有句子都这样处理，又怎么存放呢？此时，字典的Key就是每一个字符，而Value可以是每一句话在原来列表中的索引：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line">sentences = [<span class="string">'你说我是买苹果电脑，还是买windows电脑呢？'</span>, </span><br/><span class="line">             <span class="string">'人生苦短我用Python'</span>, </span><br/><span class="line">             <span class="string">'你TM一天到晚只知道得瑟'</span>,</span><br/><span class="line">             <span class="string">'不不不，我不是说你，我是说在座的各位都是垃圾。'</span>,</span><br/><span class="line">             <span class="string">'我CNM你个大SB'</span>,</span><br/><span class="line">             <span class="string">'各位同学，Good Morning！'</span>,</span><br/><span class="line">             <span class="string">'网络这个单词，它的英文为Network'</span>,</span><br/><span class="line">             <span class="string">'我不想听到有人说CNM！'</span>]</span><br/><span class="line">index_dict = {}</span><br/><span class="line"><span class="keyword">for</span> index, line <span class="keyword">in</span> enumerate(sentences):</span><br/><span class="line">    print(index, line)</span><br/><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> line:</span><br/><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> char.strip():</span><br/><span class="line">            <span class="keyword">continue</span></span><br/><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> index_dict:</span><br/><span class="line">            index_dict[char].add(index)</span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            index_dict[char] = {index}</span><br/></pre></td></tr></table></figure>
<p>生成的字典为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/><span class="line">39</span><br/><span class="line">40</span><br/><span class="line">41</span><br/><span class="line">42</span><br/><span class="line">43</span><br/><span class="line">44</span><br/><span class="line">45</span><br/><span class="line">46</span><br/><span class="line">47</span><br/><span class="line">48</span><br/><span class="line">49</span><br/><span class="line">50</span><br/><span class="line">51</span><br/><span class="line">52</span><br/><span class="line">53</span><br/><span class="line">54</span><br/><span class="line">55</span><br/><span class="line">56</span><br/><span class="line">57</span><br/><span class="line">58</span><br/><span class="line">59</span><br/><span class="line">60</span><br/><span class="line">61</span><br/><span class="line">62</span><br/><span class="line">63</span><br/><span class="line">64</span><br/><span class="line">65</span><br/><span class="line">66</span><br/><span class="line">67</span><br/><span class="line">68</span><br/><span class="line">69</span><br/><span class="line">70</span><br/><span class="line">71</span><br/><span class="line">72</span><br/><span class="line">73</span><br/><span class="line">74</span><br/><span class="line">75</span><br/></pre></td><td class="code"><pre><span class="line">{'B': {4},</span><br/><span class="line"> 'C': {4, 7},</span><br/><span class="line"> 'G': {5},</span><br/><span class="line"> 'M': {2, 4, 5, 7},</span><br/><span class="line"> 'N': {4, 6, 7},</span><br/><span class="line"> 'P': {1},</span><br/><span class="line"> 'S': {4},</span><br/><span class="line"> 'T': {2},</span><br/><span class="line"> 'd': {0, 5},</span><br/><span class="line"> 'e': {6},</span><br/><span class="line"> 'g': {5},</span><br/><span class="line"> 'h': {1},</span><br/><span class="line"> 'i': {0, 5},</span><br/><span class="line"> 'k': {6},</span><br/><span class="line"> 'n': {0, 1, 5},</span><br/><span class="line"> 'o': {0, 1, 5, 6},</span><br/><span class="line"> 'r': {5, 6},</span><br/><span class="line"> 's': {0},</span><br/><span class="line"> 't': {1, 6},</span><br/><span class="line"> 'w': {0, 6},</span><br/><span class="line"> 'y': {1},</span><br/><span class="line"> '。': {3},</span><br/><span class="line"> '一': {2},</span><br/><span class="line"> '不': {3, 7},</span><br/><span class="line"> '个': {4, 6},</span><br/><span class="line"> '为': {6},</span><br/><span class="line"> '买': {0},</span><br/><span class="line"> '人': {1, 7},</span><br/><span class="line"> '位': {3, 5},</span><br/><span class="line"> '你': {0, 2, 3, 4},</span><br/><span class="line"> '到': {2, 7},</span><br/><span class="line"> '单': {6},</span><br/><span class="line"> '只': {2},</span><br/><span class="line"> '各': {3, 5},</span><br/><span class="line"> '同': {5},</span><br/><span class="line"> '听': {7},</span><br/><span class="line"> '呢': {0},</span><br/><span class="line"> '在': {3},</span><br/><span class="line"> '圾': {3},</span><br/><span class="line"> '垃': {3},</span><br/><span class="line"> '大': {4},</span><br/><span class="line"> '天': {2},</span><br/><span class="line"> '学': {5},</span><br/><span class="line"> '它': {6},</span><br/><span class="line"> '座': {3},</span><br/><span class="line"> '得': {2},</span><br/><span class="line"> '想': {7},</span><br/><span class="line"> '我': {0, 1, 3, 4, 7},</span><br/><span class="line"> '文': {6},</span><br/><span class="line"> '是': {0, 3},</span><br/><span class="line"> '晚': {2},</span><br/><span class="line"> '有': {7},</span><br/><span class="line"> '果': {0},</span><br/><span class="line"> '瑟': {2},</span><br/><span class="line"> '生': {1},</span><br/><span class="line"> '用': {1},</span><br/><span class="line"> '电': {0},</span><br/><span class="line"> '的': {3, 6},</span><br/><span class="line"> '知': {2},</span><br/><span class="line"> '短': {1},</span><br/><span class="line"> '络': {6},</span><br/><span class="line"> '网': {6},</span><br/><span class="line"> '脑': {0},</span><br/><span class="line"> '苦': {1},</span><br/><span class="line"> '英': {6},</span><br/><span class="line"> '苹': {0},</span><br/><span class="line"> '词': {6},</span><br/><span class="line"> '说': {0, 3, 7},</span><br/><span class="line"> '还': {0},</span><br/><span class="line"> '这': {6},</span><br/><span class="line"> '道': {2},</span><br/><span class="line"> '都': {3},</span><br/><span class="line"> '！': {5, 7},</span><br/><span class="line"> '，': {0, 3, 5, 6},</span><br/><span class="line"> '？': {0}}</span><br/></pre></td></tr></table></figure>
<p>生成的字典这么长，看起来非常可怕。但是别慌，毕竟不是你人肉寻找。对Python来说，字典里面无论有多少个Key，它的查询时间都是一样的。</p>
<p>现在，我们要寻找<code>C</code>、<code>N</code>、<code>M</code>，于是代码可以写为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line">index_list = []</span><br/><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'CNM'</span>:</span><br/><span class="line">    index_list.append(index_dict.get(letter, {}))</span><br/><span class="line"/><br/><span class="line">common_index = set.intersection(*index_list)  <span class="comment"># 对包含各个字母的索引做交集，得到同时包含3个字母的句子</span></span><br/><span class="line">print(<span class="string">f'这几个句子里面同时含有`C`、`N`、`M`：<span class="subst">{common_index}</span>'</span>)</span><br/><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> common_index:</span><br/><span class="line">    print(sentences[index])</span><br/></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-02-13-50-58.png" alt=""/></p>
<p>所以，对于一组需要被查询的关键字，也可以这样搜索：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line">keywords = [<span class="string">'垃圾'</span>, <span class="string">'CNM'</span>, <span class="string">'SB'</span>, <span class="string">'TM'</span>]</span><br/><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> keywords:</span><br/><span class="line">    index_list = []</span><br/><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br/><span class="line">        index_list.append(index_dict.get(letter, {}))</span><br/><span class="line"/><br/><span class="line">    common_index = set.intersection(*index_list)</span><br/><span class="line">    print(<span class="string">f'&gt;&gt;这几个句子里面同时含有：<span class="subst">{word}</span>'</span>)</span><br/><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> common_index:</span><br/><span class="line">        print(sentences[index])</span><br/></pre></td></tr></table></figure>
<p>运行效果如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-03-02-14-05-33.png" alt=""/></p>
<p>看完这篇文章以后，你已经学会了倒排索引（Inverted-index）。这是Google搜索的核心算法之一。</p>
<p>可以看出，对于少量数据的搜索，倒排索引并不会比常规方法节约多少时间。但是当你有100000000条句子，1000个关键词的时候，用倒排索引实现搜索，所需要的时间只有常规方法的1/10甚至更少。</p>
<p>最后回到前面遇到的一个问题，当句子里面同时含有字母<code>C</code>、<code>N</code>、<code>M</code>，虽然这三个字母并不是组合在一起的，也会被搜索出来。这就涉及到搜索引擎的另一个核心技术——<code>分词</code>了。对于英文而言，使用空格来切分单词就好了。但是对于中文来说，不同的汉字组合在一起构成的词语，字数是不一样的。甚至有些专有名词，可能七八个字，但是也要作为整体来搜索。</p>
<p>分词的具体做法，又是另外一个故事了。</p>

      
    </div>

    

    
    
    

    
      