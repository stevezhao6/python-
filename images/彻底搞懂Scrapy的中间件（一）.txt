彻<div class="post-body" itemprop="articleBody">

      
      

      
        <h2 id="中间件（Middleware）"><a href="#中间件（Middleware）" class="headerlink" title="中间件（Middleware）"/>中间件（Middleware）</h2><p>中间件是Scrapy里面的一个核心概念。使用中间件可以在爬虫的请求发起之前或者请求返回之后对数据进行定制化修改，从而开发出适应不同情况的爬虫。</p>
<p>“中间件”这个中文名字和前面章节讲到的“中间人”只有一字之差。它们做的事情确实也非常相似。中间件和中间人都能在中途劫持数据，做一些修改再把数据传递出去。不同点在于，中间件是开发者主动加进去的组件，而中间人是被动的，一般是恶意地加进去的环节。中间件主要用来辅助开发，而中间人却多被用来进行数据的窃取、伪造甚至攻击。</p>
<p>在Scrapy中有两种中间件：下载器中间件（Downloader Middleware）和爬虫中间件（Spider Middleware）。</p>
<p>这一篇主要讲解下载器中间件的第一部分。</p>
<a id="more"/>
<h2 id="下载器中间件"><a href="#下载器中间件" class="headerlink" title="下载器中间件"/>下载器中间件</h2><p>Scrapy的官方文档中，对下载器中间件的解释如下。</p>
<blockquote>
<p>下载器中间件是介于Scrapy的request/response处理的钩子框架，是用于全局修改Scrapy request和response的一个轻量、底层的系统。</p>
</blockquote>
<p>这个介绍看起来非常绕口，但其实用容易理解的话表述就是：更换代理IP，更换Cookies，更换User-Agent，自动重试。</p>
<p>如果完全没有中间件，爬虫的流程如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-04-14.png" alt=""/></p>
<p>使用了中间件以后，爬虫的流程如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-04-44.png" alt=""/></p>
<h3 id="开发代理中间件"><a href="#开发代理中间件" class="headerlink" title="开发代理中间件"/>开发代理中间件</h3><p>在爬虫开发中，更换代理IP是非常常见的情况，有时候每一次访问都需要随机选择一个代理IP来进行。</p>
<p>中间件本身是一个Python的类，只要爬虫每次访问网站之前都先“经过”这个类，它就能给请求换新的代理IP，这样就能实现动态改变代理。</p>
<p>在创建一个Scrapy工程以后，工程文件夹下会有一个middlewares.py文件，打开以后其内容如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-05-13.png" alt=""/></p>
<p>Scrapy自动生成的这个文件名称为middlewares.py，名字后面的s表示复数，说明这个文件里面可以放很多个中间件。Scrapy自动创建的这个中间件是一个爬虫中间件，这种类型在第三篇文章会讲解。现在先来创建一个自动更换代理IP的中间件。</p>
<p>在middlewares.py中添加下面一段代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br/><span class="line"/><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br/><span class="line">        proxy = random.choice(settings[<span class="string">'PROXIES'</span>])</span><br/><span class="line">        request.meta[<span class="string">'proxy'</span>] = proxy</span><br/></pre></td></tr></table></figure>
<p>要修改请求的代理，就需要在请求的meta里面添加一个Key为proxy，Value为代理IP的项。</p>
<p>由于用到了random和settings，所以需要在middlewares.py开头导入它们：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br/><span class="line"><span class="keyword">from</span> scrapy.conf <span class="keyword">import</span> settings</span><br/></pre></td></tr></table></figure>
<p>在下载器中间件里面有一个名为<code>process_request()</code>的方法，这个方法中的代码会在每次爬虫访问网页之前执行。</p>
<p>打开settings.py，首先添加几个代理IP：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">PROXIES = [<span class="string">'https://114.217.243.25:8118'</span>,</span><br/><span class="line">          <span class="string">'https://125.37.175.233:8118'</span>,</span><br/><span class="line">          <span class="string">'http://1.85.116.218:8118'</span>]</span><br/></pre></td></tr></table></figure>
<p>需要注意的是，代理IP是有类型的，需要先看清楚是HTTP型的代理IP还是HTTPS型的代理IP。如果用错了，就会导致无法访问。</p>
<h3 id="激活中间件"><a href="#激活中间件" class="headerlink" title="激活中间件"/>激活中间件</h3><p>中间件写好以后，需要去settings.py中启动。在settings.py中找到下面这一段被注释的语句：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br/><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br/><span class="line"><span class="comment">#DOWNLOADER_MIDDLEWARES = {</span></span><br/><span class="line"><span class="comment">#    'AdvanceSpider.middlewares.MyCustomDownloaderMiddleware': 543,</span></span><br/><span class="line"><span class="comment">#}</span></span><br/></pre></td></tr></table></figure>
<p>解除注释并修改，从而引用ProxyMiddleware。修改为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = {</span><br/><span class="line">  <span class="string">'AdvanceSpider.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>,</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>这其实就是一个字典，字典的Key就是用点分隔的中间件路径，后面的数字表示这种中间件的顺序。由于中间件是按顺序运行的，因此如果遇到后一个中间件依赖前一个中间件的情况，中间件的顺序就至关重要。</p>
<p>如何确定后面的数字应该怎么写呢？最简单的办法就是从543开始，逐渐加一，这样一般不会出现什么大问题。如果想把中间件做得更专业一点，那就需要知道Scrapy自带中间件的顺序，如图下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-05-42.png" alt=""/></p>
<p>数字越小的中间件越先执行，例如Scrapy自带的第1个中间件<code>RobotsTxtMiddleware</code>，它的作用是首先查看settings.py中<code>ROBOTSTXT_OBEY</code>这一项的配置是<code>True</code>还是<code>False</code>。如果是<code>True</code>，表示要遵守Robots.txt协议，它就会检查将要访问的网址能不能被运行访问，如果不被允许访问，那么直接就取消这一次请求，接下来的和这次请求有关的各种操作全部都不需要继续了。</p>
<p>开发者自定义的中间件，会被按顺序插入到Scrapy自带的中间件中。爬虫会按照从100～900的顺序依次运行所有的中间件。直到所有中间件全部运行完成，或者遇到某一个中间件而取消了这次请求。</p>
<p>Scrapy其实自带了UA中间件（UserAgentMiddleware）、代理中间件（HttpProxyMiddleware）和重试中间件（RetryMiddleware）。所以，从“原则上”说，要自己开发这3个中间件，需要先禁用Scrapy里面自带的这3个中间件。要禁用Scrapy的中间件，需要在settings.py里面将这个中间件的顺序设为None：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = {</span><br/><span class="line">  <span class="string">'AdvanceSpider.middlewares.ProxyMiddleware'</span>: <span class="number">543</span>,</span><br/><span class="line">  <span class="string">'scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware'</span>: <span class="literal">None</span>,</span><br/><span class="line">  <span class="string">'scrapy.contrib.downloadermiddleware.httpproxy.HttpProxyMiddleware'</span>: <span class="literal">None</span></span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>为什么说“原则上”应该禁用呢？先查看Scrapy自带的代理中间件的源代码，如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-06-06.png" alt=""/></p>
<p>从上图可以看出，如果Scrapy发现这个请求已经被设置了代理，那么这个中间件就会什么也不做，直接返回。因此虽然Scrapy自带的这个代理中间件顺序为750，比开发者自定义的代理中间件的顺序543大，但是它并不会覆盖开发者自己定义的代理信息，所以即使不禁用系统自带的这个代理中间件也没有关系。</p>
<p>完整地激活自定义中间件的settings.py的部分内容如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-06-31.png" alt=""/></p>
<p>配置好以后运行爬虫，爬虫会在每次请求前都随机设置一个代理。要测试代理中间件的运行效果，可以使用下面这个练习页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">http://exercise.kingname.info/exercise_middleware_ip</span><br/></pre></td></tr></table></figure>
<p>这个页面会返回爬虫的IP地址，直接在网页上打开，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-06-48.png" alt=""/></p>
<p>这个练习页支持翻页功能，在网址后面加上“/页数”即可翻页。例如第100页的网址为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">http://exercise.kingname.info/exercise_middleware_ip/100</span><br/></pre></td></tr></table></figure>
<p>使用了代理中间件为每次请求更换代理的运行结果，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-07-06.png" alt=""/></p>
<p>代理中间件的可用代理列表不一定非要写在settings.py里面，也可以将它们写到数据库或者Redis中。一个可行的自动更换代理的爬虫系统，应该有如下的3个功能。</p>
<ol>
<li>有一个小爬虫ProxySpider去各大代理网站爬取免费代理并验证，将可以使用的代理IP保存到数据库中。</li>
<li>在ProxyMiddlerware的process_request中，每次从数据库里面随机选择一条代理IP地址使用。</li>
<li>周期性验证数据库中的无效代理，及时将其删除。<br/>由于免费代理极其容易失效，因此如果有一定开发预算的话，建议购买专业代理机构的代理服务，高速而稳定。</li>
</ol>
<h3 id="开发UA中间件"><a href="#开发UA中间件" class="headerlink" title="开发UA中间件"/>开发UA中间件</h3><p>开发UA中间件和开发代理中间件几乎一样，它也是从settings.py配置好的UA列表中随机选择一项，加入到请求头中。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UAMiddleware</span><span class="params">(object)</span>:</span></span><br/><span class="line"/><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br/><span class="line">        ua = random.choice(settings[<span class="string">'USER_AGENT_LIST'</span>])</span><br/><span class="line">        request.headers[<span class="string">'User-Agent'</span>] = ua</span><br/></pre></td></tr></table></figure>
<p>比IP更好的是，UA不会存在失效的问题，所以只要收集几十个UA，就可以一直使用。常见的UA如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/></pre></td><td class="code"><pre><span class="line">USER_AGENT_LIST = [</span><br/><span class="line"><span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36"</span>,</span><br/><span class="line">  <span class="string">"Dalvik/1.6.0 (Linux; U; Android 4.2.1; 2013022 MIUI/JHACNBL30.0)"</span>,</span><br/><span class="line">  <span class="string">"Mozilla/5.0 (Linux; U; Android 4.4.2; zh-cn; HUAWEI MT7-TL00 Build/HuaweiMT7-TL00) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span>,</span><br/><span class="line">  <span class="string">"AndroidDownloadManager"</span>,</span><br/><span class="line">  <span class="string">"Apache-HttpClient/UNAVAILABLE (java 1.4)"</span>,</span><br/><span class="line">  <span class="string">"Dalvik/1.6.0 (Linux; U; Android 4.3; SM-N7508V Build/JLS36C)"</span>,</span><br/><span class="line">  <span class="string">"Android50-AndroidPhone-8000-76-0-Statistics-wifi"</span>,</span><br/><span class="line">  <span class="string">"Dalvik/1.6.0 (Linux; U; Android 4.4.4; MI 3 MIUI/V7.2.1.0.KXCCNDA)"</span>,</span><br/><span class="line">  <span class="string">"Dalvik/1.6.0 (Linux; U; Android 4.4.2; Lenovo A3800-d Build/LenovoA3800-d)"</span>,</span><br/><span class="line">  <span class="string">"Lite 1.0 ( http://litesuits.com )"</span>,</span><br/><span class="line">  <span class="string">"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727)"</span>,</span><br/><span class="line">  <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36 SE 2.X MetaSr 1.0"</span>,</span><br/><span class="line">  <span class="string">"Mozilla/5.0 (Linux; U; Android 4.1.1; zh-cn; HTC T528t Build/JRO03H) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30; 360browser(securitypay,securityinstalled); 360(android,uppayplugin); 360 Aphone Browser (2.0.4)"</span>,</span><br/><span class="line">]</span><br/></pre></td></tr></table></figure>
<p>配置好UA以后，在settings.py下载器中间件里面激活它，并使用UA练习页来验证UA是否每一次都不一样。练习页的地址为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">http://exercise.kingname.info/exercise_middleware_ua。</span><br/></pre></td></tr></table></figure>
<p>UA练习页和代理练习页一样，也是可以无限制翻页的。</p>
<p>运行结果如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-07-41.png" alt=""/></p>
<h3 id="开发Cookies中间件"><a href="#开发Cookies中间件" class="headerlink" title="开发Cookies中间件"/>开发Cookies中间件</h3><p>对于需要登录的网站，可以使用Cookies来保持登录状态。那么如果单独写一个小程序，用Selenium持续不断地用不同的账号登录网站，就可以得到很多不同的Cookies。由于Cookies本质上就是一段文本，所以可以把这段文本放在Redis里面。这样一来，当Scrapy爬虫请求网页时，可以从Redis中读取Cookies并给爬虫换上。这样爬虫就可以一直保持登录状态。</p>
<p>以下面这个练习页面为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">http://exercise.kingname.info/exercise_login_success</span><br/></pre></td></tr></table></figure>
<p>如果直接用Scrapy访问，得到的是登录界面的源代码，如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-08-14.png" alt=""/></p>
<p>现在，使用中间件，可以实现完全不改动这个loginSpider.py里面的代码，就打印出登录以后才显示的内容。</p>
<p>首先开发一个小程序，通过Selenium登录这个页面，并将网站返回的Headers保存到Redis中。这个小程序的代码如下图所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-08-34.png" alt=""/></p>
<p>这段代码的作用是使用Selenium和ChromeDriver填写用户名和密码，实现登录练习页面，然后将登录以后的Cookies转换为JSON格式的字符串并保存到Redis中。</p>
<p>接下来，再写一个中间件，用来从Redis中读取Cookies，并把这个Cookies给Scrapy使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginMiddleware</span><span class="params">(object)</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br/><span class="line">        self.client = redis.StrictRedis()</span><br/><span class="line">    </span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br/><span class="line">        <span class="keyword">if</span> spider.name == <span class="string">'loginSpider'</span>:</span><br/><span class="line">            cookies = json.loads(self.client.lpop(<span class="string">'cookies'</span>).decode())</span><br/><span class="line">            request.cookies = cookies</span><br/></pre></td></tr></table></figure>
<p>设置了这个中间件以后，爬虫里面的代码不需要做任何修改就可以成功得到登录以后才能看到的HTML，如图12-12所示。</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2018-11-18-23-08-55.png" alt=""/></p>
<p>如果有某网站的100个账号，那么单独写一个程序，持续不断地用Selenium和ChromeDriver或者Selenium 和PhantomJS登录，获取Cookies，并将Cookies存放到Redis中。爬虫每次访问都从Redis中读取一个新的Cookies来进行爬取，就大大降低了被网站发现或者封锁的可能性。</p>
<p>这种方式不仅适用于登录，也适用于验证码的处理。</p>
<p>这一篇就讲到这里，在下一篇，我们将会介绍如何在下载器中间件中集成Selenium，进行请求重试和处理异常。</p>
<blockquote>
<p>本文节选自我的新书《Python爬虫开发  从入门到实战》完整目录可以在京东查询到 <a href="https://item.jd.com/12436581.html" target="_blank" rel="noopener">https://item.jd.com/12436581.html</a></p>
</blockquote>
<hr/>
<h2 id="抽奖送书"><a href="#抽奖送书" class="headerlink" title="抽奖送书"/>抽奖送书</h2><p><strong>今日赠书</strong>：《云数据中心网络架构与技术》、《企业 WLAN 架构与技术》、《SD-WAN 架构与技术》和《园区网络架构与技术》。</p>
<p><strong>赞助商</strong>：人民邮电出版社</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2020-06-25-20-38-31.png" alt=""/></p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2020-06-25-20-42-31.png" alt=""/></p>

      
    </div>

    

    
    
    

    
      