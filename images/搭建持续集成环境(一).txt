搭<div class="post-body" itemprop="articleBody">

      
      

      
        <h2 id="开题说明"><a href="#开题说明" class="headerlink" title="开题说明"/>开题说明</h2><p>软件开发的过程是一个从简单到复杂的过程。我们在开发的时候，会首先写出具有核心的功能的原型，满足基本的需求。但是这个原型使用非常的麻烦，有无数的配置，数据的格式也需要严格的规定，稍微一个不合法的输入输出就有可能导致程序的崩溃。</p>
<p>接下来，在这个基本的原型上，我们逐渐进行完善，逐渐提高了程序的鲁棒性，用户体验逐渐的提高。新的需求出现了，于是又添加新的功能来满足新的需求。</p>
<p>在这样一个逐渐搭建（迭代）起来的过程中，我们要进行不间断的测试来保证修改没有破坏代码的已有功能，也要防止引入新的bug.如果是团队开发，要保持代码风格的一致。如果多个人同时开发，又要防止代码修改的地方出现冲突。一个版本的代码开发完成了，测试也没有问题了，同时部署到几百台服务器上，完成新功能的上线。</p>
<p>这样一个流程，如果手动来完成是相当痛苦的。于是，就需要持续集成来帮助我们完成这些琐碎的工作。开发者开发好了程序，本地测试没有问题了。使用Git提交到代码仓库，然后触发一系列的检查流程，如果出问题就给提交者发邮件提示问题，如果一切正常就开始代码审核(code review)，审核完成，合并代码。合并完成以后，会自动做好部署前面的集成测试，然后等待下一次部署周期到达以后自动将代码部署到各个服务器。</p>
<p>持续集成这个系列的文章，就是要完成以上各个环节的搭建工作，从而让开发者把精力放在开发上，而不是一些无谓的体力劳动上。</p>
<p>我会使用树莓派2 来搭建持续集成的环境，树莓派的系统为ArchLinux.</p>
<h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"/>Jenkins</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"/>介绍</h2><p>Jenkins是一个用Java编写的开源的持续集成工具。它是持续集成的核心部分，扮演了一个总管的角色，统筹联系各个部分。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"/>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">sudo pacman -S jenkins</span><br/></pre></td></tr></table></figure>
<p>由于jenkins是Java写的，所以这个时候如果你的系统中没有Java的运行环境，他就会让你选择安装jre7-openjdk 或者是jre8-openjdk, 我选择的是安装jre8-openjdk. 这个时候我没有意识到，隐患已经埋下来了。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"/>启动</h3><p>在ArchLinux中，什么东西都喜欢使用systemd来启动，所以执行以下命令来启动Jenkins：<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins.service</span><br/></pre></td></tr></table></figure></p>
<p>理论上这样就能使用了。但是当我在浏览器打开<code>http://192.168.2.107:8090</code>的时候却发现网页无法打开。于是检查它的log:<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">journalctl -u jenkins</span><br/></pre></td></tr></table></figure></p>
<p>发现原来报错了。如图：<br/><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/openjdkerror.png" alt=""/></p>
<p>难道说Java环境有问题？于是我是用:<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">java -version</span><br/></pre></td></tr></table></figure></p>
<p>来检查Java环境，果然, 连查看Java 的版本都报错了，如图：<br/><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/javaversion.png" alt=""/></p>
<h3 id="重装"><a href="#重装" class="headerlink" title="重装"/>重装</h3><p>对于这种情况，看起来不能使用openJDK了，于是去安装Oracle的JDK。</p>
<p>首先要卸载openJdk:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">sudo pacman -Rdd jre8-openjdk</span><br/></pre></td></tr></table></figure>
<p>这里使用<code>-Rdd</code> 而不是<code>-R</code>就是为了忽略依赖性。如果直接使用<code>-R</code>的话，会报错，无法卸载。</p>
<p>如何判断卸载是否完成呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">java -version</span><br/></pre></td></tr></table></figure>
<p>提示找不到Java的时候，就说明卸载完成了。如果此时依然会爆出上面的core dumpd的错误, 就说明openJDK没有卸载干净。输入：<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">sudo pacman -Rdd jre</span><br/></pre></td></tr></table></figure></p>
<p>然后按键盘上面的Tab键，让自动完成功能来探测到底是哪个部分还没有卸载。</p>
<p>完全卸载干净openJDK以后，就可以安装Oracle的JDK了。</p>
<p>由于Oracle的JDK不能直接使用pacman来安装，所以需要使用AUR。树莓派的CPU是ARM架构，所以使用使用<a href="https://aur.archlinux.org/packages/jdk-arm/" target="_blank" rel="noopener">arm版的JDK</a>。如果有朋友是在X86的电脑上面安装的话，可以使用<a href="https://aur.archlinux.org/packages/jdk" target="_blank" rel="noopener">x86版的JDK</a>。</p>
<p>对于安装AUR的文件，首先从左侧<a href="https://aur.archlinux.org/cgit/aur.git/snapshot/jdk-arm.tar.gz" target="_blank" rel="noopener">Download snapshot</a>下载pkg文件，然后使用以下命令来安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">tar -xvf jdk-arm.tar.gz</span><br/><span class="line">cd jdk-arm</span><br/><span class="line">makepkg -sri</span><br/></pre></td></tr></table></figure>
<p>然后就等待下载安装文件然后完成安装。如图：<br/><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/aurinstall.png" alt=""/></p>
<p>完成以后，我们再执行:<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">java -version</span><br/></pre></td></tr></table></figure></p>
<p>就可以正常看到Java的版本信息了。</p>
<h3 id="再启动"><a href="#再启动" class="headerlink" title="再启动"/>再启动</h3><p>再一次启动Jenkins:<br/><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins.service</span><br/></pre></td></tr></table></figure></p>
<p>也可以正常启动了。（输入命令以后等待1分钟左右，让服务完全启动起来。）如图：<br/><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/jenkins.png" alt=""/></p>
<p>根据它的提示读取密码，并填写到网页上，于是Jenkins就算是安装成功了。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"/>安装插件</h3><p>插件是Jenkins的精华，在第一次进入的时候，Jenkins就会让你选择插件。这里我选择<br/><code>Select plugins to install</code>.<br/><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/plugin.png" alt=""/></p>
<p>它默认已经勾选了一些插件，我增加了以下的插件：</p>
<ul>
<li>Source Code Management 下面的Github plugin</li>
<li>Notifications and Publishing下面的 SSH plugin</li>
<li>Pipelines and Continuous Delivery 下面的 Parameterized Trigger plugin</li>
</ul>
<p>选择好以后点击 install就可以等待它安装了。如果发现漏选了或者多选了也没有关系，因为之后还可以手动管理这些插件。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"/>总结</h3><p>这一篇讲到了如何在树莓派上面搭建Jenkins并安装插件。下一篇将会讲到Jenkins Job的创建和配置和使用。</p>

      
    </div>

    

    
    
    

    
      