使<div class="post-body" itemprop="articleBody">

      
      

      
        <p>在上一篇文章里面，我们讲到了如何使用Python的<code>yield</code>关键字简化代码，压平多层嵌套字典的。</p>
<p>那么如果我们的数据不仅仅有字典，还有列表，是一个字典列表多层嵌套的数据怎么办呢？例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/></pre></td><td class="code"><pre><span class="line">nest_dict = {</span><br/><span class="line">    <span class="string">'a'</span>: <span class="number">1</span>,</span><br/><span class="line">    <span class="string">'b'</span>: {</span><br/><span class="line">        <span class="string">'c'</span>: <span class="number">2</span>,</span><br/><span class="line">        <span class="string">'d'</span>: <span class="number">3</span>,</span><br/><span class="line">        <span class="string">'e'</span>: {<span class="string">'f'</span>: <span class="number">4</span>}</span><br/><span class="line">    },</span><br/><span class="line">    <span class="string">'g'</span>: {<span class="string">'h'</span>: <span class="number">5</span>},</span><br/><span class="line">    <span class="string">'i'</span>: <span class="number">6</span>,</span><br/><span class="line">    <span class="string">'j'</span>: {<span class="string">'k'</span>: {<span class="string">'l'</span>: {<span class="string">'m'</span>: <span class="number">8</span>}}},</span><br/><span class="line">    <span class="string">'n'</span>: [<span class="number">1</span>, {<span class="string">'o'</span>: <span class="number">1</span>, <span class="string">'p'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  <span class="string">'q'</span>: {<span class="string">'r'</span>: {<span class="string">'s'</span>: <span class="number">100</span>}}}, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">5</span>]</span><br/><span class="line">}</span><br/></pre></td></tr></table></figure>
<p>现在，请停下来，敲一敲代码，想想如何把处理列表的逻辑添加进去。</p>
<p>首先，我们来看一下最终被压平以后的数据长什么样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/></pre></td><td class="code"><pre><span class="line">{<span class="string">'a'</span>: <span class="number">1</span>,</span><br/><span class="line"> <span class="string">'b_c'</span>: <span class="number">2</span>,</span><br/><span class="line"> <span class="string">'b_d'</span>: <span class="number">3</span>,</span><br/><span class="line"> <span class="string">'b_e_f'</span>: <span class="number">4</span>,</span><br/><span class="line"> <span class="string">'g_h'</span>: <span class="number">5</span>,</span><br/><span class="line"> <span class="string">'i'</span>: <span class="number">6</span>,</span><br/><span class="line"> <span class="string">'j_k_l_m'</span>: <span class="number">8</span>,</span><br/><span class="line"> <span class="string">'n_0'</span>: <span class="number">1</span>,</span><br/><span class="line"> <span class="string">'n_1_o'</span>: <span class="number">1</span>,</span><br/><span class="line"> <span class="string">'n_1_p_0'</span>: <span class="number">1</span>,</span><br/><span class="line"> <span class="string">'n_1_p_1'</span>: <span class="number">2</span>,</span><br/><span class="line"> <span class="string">'n_1_p_2'</span>: <span class="number">3</span>,</span><br/><span class="line"> <span class="string">'n_1_q_r_s'</span>: <span class="number">100</span>,</span><br/><span class="line"> <span class="string">'n_2'</span>: <span class="number">3</span>,</span><br/><span class="line"> <span class="string">'n_3_0'</span>: <span class="number">1</span>,</span><br/><span class="line"> <span class="string">'n_3_1'</span>: <span class="number">2</span>,</span><br/><span class="line"> <span class="string">'n_3_2'</span>: <span class="number">3</span>,</span><br/><span class="line"> <span class="string">'n_4'</span>: <span class="number">5</span>}</span><br/></pre></td></tr></table></figure>
<p>对于<code>'n': ['a', 'b', 'c']</code>这种形式的数据，我们把它转换为： <code>{'n_0': 'a', 'n_1': 'b', 'n_2': 'c'}</code></p>
<a id="more"/>
<p>我们原来的核心代码是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flat</span><span class="params">(x)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> x.items():</span><br/><span class="line">        <span class="keyword">if</span> isinstance(value, dict):</span><br/><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> flat(value):</span><br/><span class="line">                k = <span class="string">f'<span class="subst">{key}</span>_<span class="subst">{k}</span>'</span></span><br/><span class="line">                <span class="keyword">yield</span> (k, v)</span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            <span class="keyword">yield</span> (key, value)</span><br/></pre></td></tr></table></figure>
<p>你的第一反应，是不是这样修改代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flat</span><span class="params">(x)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> x.items():</span><br/><span class="line">        <span class="keyword">if</span> isinstance(value, dict):</span><br/><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> flat(value):</span><br/><span class="line">                k = <span class="string">f'<span class="subst">{key}</span>_<span class="subst">{k}</span>'</span></span><br/><span class="line">                <span class="keyword">yield</span> (k, v)</span><br/><span class="line">        <span class="keyword">elif</span> isinstance(value, list):</span><br/><span class="line">            <span class="string">"一大堆处理列表的代码"</span></span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            <span class="keyword">yield</span> (key, value)</span><br/></pre></td></tr></table></figure>
<p>如果你使用<code>return</code>和递归，你可能确实需要这样写。</p>
<p>但如果你使用<code>yield</code>关键字，那么，你虽然也要修改代码，可是修改的地方却不是这里。我们要修改的地方在<code>for key, value in x.items()</code>。</p>
<p>因为<code>.items()</code>这个方法是字典的方法，列表没有这个方法。所以我们需要写一个通用的迭代生成器，支持字典和列表，所以我们增加一个函数：<code>iter_x</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iter_x</span><span class="params">(x)</span>:</span></span><br/><span class="line">    <span class="keyword">if</span> isinstance(x, dict):</span><br/><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> x.items():</span><br/><span class="line">            <span class="keyword">yield</span> (key, value)</span><br/><span class="line">    <span class="keyword">elif</span> isinstance(x, list):</span><br/><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(x):</span><br/><span class="line">            <span class="keyword">yield</span> (index, value)</span><br/></pre></td></tr></table></figure>
<p>现在，我们在原来的代码中调用这段个新的生成器函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flat</span><span class="params">(x)</span>:</span></span><br/><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> iter_x(x):</span><br/><span class="line">        <span class="keyword">if</span> isinstance(value, (dict, list)):</span><br/><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> flat(value):</span><br/><span class="line">                k = <span class="string">f'<span class="subst">{key}</span>_<span class="subst">{k}</span>'</span></span><br/><span class="line">                <span class="keyword">yield</span> (k, v)</span><br/><span class="line">        <span class="keyword">else</span>:</span><br/><span class="line">            <span class="keyword">yield</span> (key, value)</span><br/></pre></td></tr></table></figure>
<p>其中，<code>isinstance(value, (dict, list))</code>，相当于<code>isinstance(value, dict) or isinstance(value, list)</code>。</p>
<p>我们来看一下运行效果：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-11-02-22-25-08.png" alt=""/></p>
<p>掌握<code>yield</code>关键字，你的编程思路和想问题的方式会发生一个重大的转变。</p>

      
    </div>

    

    
    
    

    
      