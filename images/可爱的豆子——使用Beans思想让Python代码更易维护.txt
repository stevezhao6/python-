可<div class="post-body" itemprop="articleBody">

      
      

      
        <p>我曾经是一个对Java非常反感的人，因为Java的语法非常啰嗦。而用惯了动态类型的Python再使用静态类型的Java就会觉得多出了很多的工作量。</p>
<p>因为工作的关系，我开始使用Java来做项目。在这个过程中，我发现Java在某些方面确实和Python不一样。</p>
<p>有一句话说的好：</p>
<blockquote>
<p>语言决定了世界观。</p>
</blockquote>
<p>当我Java用的越来越多的时候，我渐渐发现我不是那么讨厌它了。</p>
<p>今天我要讲的，是我从Java里面学到的，一个被称为JavaBeans的东西。</p>
<blockquote>
<p>In computing based on the Java Platform, JavaBeans are classes that encapsulate many objects into a single object (the bean). They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods. </p>
</blockquote>
<p>一句话概括起来： <strong>当一些信息需要使用类似于字典套字典套列表这种很深的结构来储存的时候，请改用类来储存。</strong></p>
<p>在Python里面，我以前会写这样的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/></pre></td><td class="code"><pre><span class="line">person_list = [{</span><br/><span class="line">        <span class="string">'name'</span>: <span class="string">'kingname'</span>,</span><br/><span class="line">        <span class="string">'age'</span>: <span class="number">23</span>,</span><br/><span class="line">        <span class="string">'sex'</span>: <span class="string">'male'</span></span><br/><span class="line">        <span class="string">'detail'</span>: {</span><br/><span class="line">                    <span class="string">'address'</span>: <span class="string">'xxx'</span>,</span><br/><span class="line">                    <span class="string">'work'</span>: <span class="string">'engineer'</span>,</span><br/><span class="line">                    <span class="string">'salary'</span>: <span class="number">100000</span></span><br/><span class="line">            }</span><br/><span class="line">},</span><br/><span class="line">{</span><br/><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaoming'</span>,</span><br/><span class="line">        <span class="string">'age'</span>: <span class="number">65</span>,</span><br/><span class="line">        <span class="string">'sex'</span>: <span class="string">'male'</span></span><br/><span class="line">        <span class="string">'detail'</span>: {</span><br/><span class="line">                    <span class="string">'address'</span>: <span class="string">'yyy'</span>,</span><br/><span class="line">                    <span class="string">'work'</span>: <span class="string">'pm'</span>,</span><br/><span class="line">                    <span class="string">'salary'</span>: <span class="number">0.5</span></span><br/><span class="line">            }</span><br/><span class="line">}]</span><br/></pre></td></tr></table></figure>
<p>由于Python动态类型的特点，字典里面的value经常是包含了各种类型，有时候，字典里面包含了字典，里面的字典里面还有列表，这个内部字典里面的列表里面又包含了字典……</p>
<p>当我刚刚开始写Java代码的时候，也会保留了这个坏习惯，于是我定义的一个变量类似于这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Map&lt;String, Map&lt;String, Object&gt;&gt;&gt;&gt; info = .....</span><br/></pre></td></tr></table></figure>
<p>并且由于Java是静态类型语言，有时候Map里面的Value类型还不一致，需要使用Object来代替，等要使用的时候再做类型转换。</p>
<p>对于这样的写法，真可谓是写代码一时爽，调试代码火葬场。我过几天读自己的代码，自己都不知道这个字典里面有哪些内容，也不知道它们有哪些类型，必须到定义的地方去看。</p>
<p>我的Mentor看了我的Java代码以后，让我去用一下JavaBeans，于是我的世界瞬间就简洁多了。后来我将JavaBeans的思想用到Python中，果然Python代码也变得好看多了。</p>
<p>使用上面person_list这个复杂的结构为例，我用JavaBeans的思想，在Python里面重构它：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/><span class="line">30</span><br/><span class="line">31</span><br/><span class="line">32</span><br/><span class="line">33</span><br/><span class="line">34</span><br/><span class="line">35</span><br/><span class="line">36</span><br/><span class="line">37</span><br/><span class="line">38</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">''</span>, age=<span class="number">0</span>, sex=<span class="string">''</span>, detail=None)</span>:</span></span><br/><span class="line">        self._name = name</span><br/><span class="line">        self._age = age</span><br/><span class="line">        self._sex = sex</span><br/><span class="line">        self._detail = detail</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._name</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @name.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, new_name)</span>:</span></span><br/><span class="line">        self._name = new_name</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._age</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @age.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, new_age)</span>:</span></span><br/><span class="line">        self._age = new_age</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._sex</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @sex.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sex</span><span class="params">(self, new_sex)</span>:</span></span><br/><span class="line">        self._sex = new_sex</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._detail</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @detail.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(self, new_detail)</span>:</span></span><br/><span class="line">        self._detail = new_detail</span><br/></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/><span class="line">10</span><br/><span class="line">11</span><br/><span class="line">12</span><br/><span class="line">13</span><br/><span class="line">14</span><br/><span class="line">15</span><br/><span class="line">16</span><br/><span class="line">17</span><br/><span class="line">18</span><br/><span class="line">19</span><br/><span class="line">20</span><br/><span class="line">21</span><br/><span class="line">22</span><br/><span class="line">23</span><br/><span class="line">24</span><br/><span class="line">25</span><br/><span class="line">26</span><br/><span class="line">27</span><br/><span class="line">28</span><br/><span class="line">29</span><br/></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Detail</span><span class="params">(object)</span>:</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address=<span class="string">''</span>, work=<span class="string">''</span>, salary=<span class="number">0</span>)</span>:</span></span><br/><span class="line">        self._address = address</span><br/><span class="line">        self._work = work</span><br/><span class="line">        self._salary = salary</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">address</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._address</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @address.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">address</span><span class="params">(self, new_address)</span>:</span></span><br/><span class="line">        self._address = new_address</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._work</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @work.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(self, new_work)</span>:</span></span><br/><span class="line">        self._work = new_work</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @property</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary</span><span class="params">(self)</span>:</span></span><br/><span class="line">        <span class="keyword">return</span> self._salary</span><br/><span class="line">    </span><br/><span class="line"><span class="meta">    @salary.setter</span></span><br/><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary</span><span class="params">(self, new_salary)</span>:</span></span><br/><span class="line">        self._salary = new_salary</span><br/></pre></td></tr></table></figure>
<p>从这里可以看到，我把字典变成了类。于是，当我想保存我自己的信息和小明的时候，我就可以这样写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/></pre></td><td class="code"><pre><span class="line">detail_kingname = Detail(address=<span class="string">'xxx'</span>, work=<span class="string">'engineer'</span>, salary=<span class="number">10000</span>),</span><br/><span class="line">kingname = Person(name=<span class="string">'kingname'</span>, age=<span class="number">23</span>, sex=<span class="string">'male'</span>, detail=detail_kingname)</span><br/><span class="line"/><br/><span class="line">detail_xiaoming = Detail(address=<span class="string">'yyy'</span>, work=<span class="string">'pm'</span>, salary=<span class="number">0.5</span>),</span><br/><span class="line">xiaoming = Person(name=<span class="string">'xiaoming'</span>, age=<span class="number">65</span>, sex=<span class="string">'male'</span>, detail=detail_xiaoming)</span><br/><span class="line"/><br/><span class="line">person_list = [kingname, xiaoming]</span><br/></pre></td></tr></table></figure>
<p>这样写，虽然说代码量确实翻了不止一倍，但是当我们后期维护的时候或者遇到问题来调试代码，我们就能发现这样写的好处。</p>
<p>举一个很简单的例子，在写了代码一年以后，我已经对这段代码没有多少印象了，现在我得到了变量<code>person_list</code>, 我想查看每个人的工资。首先，由于<code>Person</code>和<code>Detail</code>这两个类是已经定义好的，分别放在<code>Person.py</code>和<code>Detail.py</code>两个文件中，于是我点开它们，就知道，原来工资是保存在<code>Detail</code>这个类中的，关键词是<code>salary</code>, 而<code>Detail</code>又是保存在<code>Person</code>中的，关键词是<code>detail</code>。</p>
<p>所以要查看每个人的工资，我可以这样写:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> person_list:</span><br/><span class="line">    detail = person.detail</span><br/><span class="line">    salary = detail.salary</span><br/><span class="line">    print(salary)</span><br/></pre></td></tr></table></figure>
<p>但是如果我使用的是最上面字典的那种方式，那么情况就没有这么简单了。因为我不知道工资是在这个字典的什么地方。于是我首先要找到<code>person_list</code>是在哪里初始化的，然后看它里面有什么。在这个例子中，我是一次性把整个列表字典初始化完成的，直接找到列表初始化的地方就知道，原来这个<code>person_list</code>下面有很多个字典，字典有一个key 叫<code>detail</code>,这个<code>detail</code>的value本身又是一个字典，它下面的key<code>salary</code>保存了工资的信息。这似乎还比较方便。但是如果字典里面的信息不是一次性初始化完成的呢？万一<code>detail</code>这一个key是后面再加的呢？于是又要去找<code>detail</code>初始化的地方……</p>
<p>第二个好处，使用Beans的时候，每个关键字是定义好的，<code>salary</code>就只能叫做<code>salary</code>，如果写成了<code>salarv</code>, 集成开发环境会立刻告诉你，<code>Detail</code>没有<code>salarv</code>这个属性。但是如果使用字典的方式，我在给字典赋值的时候，一不小心:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">detail[<span class="string">'salarv'</span>] = <span class="number">0.5</span></span><br/></pre></td></tr></table></figure>
<p>由于这里的<code>salarv</code>是字符串，所以集成开发环境是不会报错的，只有等你运行的时候,尝试读取<code>detail['salary']</code>里面的值，Python会告诉你:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br/><span class="line">  File "xxx.py", line 1, in &lt;module&gt;</span><br/><span class="line">KeyError: 'salary'</span><br/></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"/>总结</h2><p>将JavaBeans的思想用在Python中，避免字典套字典这种深层嵌套的情况，对于一些需要反复使用的字典，使用类来表示。这样做，别人读代码的时候会更加的容易，自己开发的时候，也会避免出现问题。</p>
<p>本文首发于：<a href="http://kingname.info/2016/06/19/bean-in-python/" target="_blank" rel="noopener">http://kingname.info/2016/06/19/bean-in-python/</a> 转载请注明出处。</p>

      
    </div>

    

    
    
    

    
      