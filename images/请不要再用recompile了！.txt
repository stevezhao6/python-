请<div class="post-body" itemprop="articleBody">

      
      

      
        <p>如果大家在网上搜索<code>Python 正则表达式</code>，你将会看到大量的垃圾文章会这样写代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br/><span class="line"/><br/><span class="line">pattern = re.compile(<span class="string">'正则表达式'</span>)</span><br/><span class="line">text = <span class="string">'一段字符串'</span></span><br/><span class="line">result = pattern.findall(text)</span><br/></pre></td></tr></table></figure>
<p>这些文章的作者，可能是被其他语言的坏习惯影响了，也可能是被其他垃圾文章误导了，不假思索拿来就用。</p>
<p><strong>在Python里面，真的不需要使用re.compile!</strong></p>
<p>为了证明这一点，我们来看Python的源代码。</p>
<p>在PyCharm里面输入:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br/><span class="line"/><br/><span class="line">re.search</span><br/></pre></td></tr></table></figure>
<p>然后Windows用户按住键盘上的Ctrl键，鼠标左键点击<code>search</code>，Mac用户按住键盘上的Command键，鼠标左键点击<code>search</code>，PyCharm会自动跳转到Python的re模块。在这里，你会看到我们常用的正则表达式方法，无论是<code>findall</code>还是<code>search</code>还是<code>sub</code>还是<code>match</code>，全部都是这样写的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/></pre></td><td class="code"><pre><span class="line">_compile(pattern, flag).对应的方法(string)</span><br/></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/><span class="line">5</span><br/><span class="line">6</span><br/><span class="line">7</span><br/><span class="line">8</span><br/><span class="line">9</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findall</span><span class="params">(pattern, string, flags=<span class="number">0</span>)</span>:</span></span><br/><span class="line">    <span class="string">"""Return a list of all non-overlapping matches in the string.</span></span><br/><span class="line"><span class="string"/></span><br/><span class="line"><span class="string">    If one or more capturing groups are present in the pattern, return</span></span><br/><span class="line"><span class="string">    a list of groups; this will be a list of tuples if the pattern</span></span><br/><span class="line"><span class="string">    has more than one group.</span></span><br/><span class="line"><span class="string"/></span><br/><span class="line"><span class="string">    Empty matches are included in the result."""</span></span><br/><span class="line">    <span class="keyword">return</span> _compile(pattern, flags).findall(string)</span><br/></pre></td></tr></table></figure>
<p>如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-06-25-12-41-18.png" alt=""/></p>
<p>然后我们再来看<code>compile</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile</span><span class="params">(pattern, flags=<span class="number">0</span>)</span>:</span></span><br/><span class="line">    <span class="string">"Compile a regular expression pattern, returning a Pattern object."</span></span><br/><span class="line">    <span class="keyword">return</span> _compile(pattern, flags)</span><br/></pre></td></tr></table></figure>
<p>如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-06-25-12-43-19.png" alt=""/></p>
<p>看出问题来了吗？</p>
<p>我们常用的正则表达式方法，都已经自带了<code>compile</code>了！</p>
<p>根本没有必要多此一举先<code>re.compile</code>再调用正则表达式方法。</p>
<p>此时，可能会有人反驳：</p>
<p>如果我有一百万条字符串，使用某一个正则表达式去匹配，那么我可以这样写代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/><span class="line">4</span><br/></pre></td><td class="code"><pre><span class="line">texts = [包含一百万个字符串的列表]</span><br/><span class="line">pattern = re.compile(<span class="string">'正则表达式'</span>)</span><br/><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br/><span class="line">    pattern.search(text)</span><br/></pre></td></tr></table></figure>
<p>这个时候，<code>re.compile</code>只执行了1次，而如果你像下面这样写代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br/><span class="line">2</span><br/><span class="line">3</span><br/></pre></td><td class="code"><pre><span class="line">texts = [包含一百万个字符串的列表]</span><br/><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> texts:</span><br/><span class="line">    re.search(<span class="string">'正则表达式'</span>, text)</span><br/></pre></td></tr></table></figure>
<p>相当于你在底层对同一个正则表达式执行了100万次<code>re.compile</code>。</p>
<p>Talk is cheap, show me the code.</p>
<p>我们来看源代码，正则表达式<code>re.compile</code>调用的是<code>_compile</code>，我们就去看<code>_compile</code>的源代码，如下图所示：</p>
<p><img src="https://kingname-1257411235.cos.ap-chengdu.myqcloud.com/2019-06-25-12-49-36.png" alt=""/></p>
<p>红框中的代码，说明了<code>_compile</code>自带缓存。它会自动储存最多512条由type(pattern), pattern, flags)组成的Key，只要是同一个正则表达式，同一个flag，那么调用两次_compile时，第二次会直接读取缓存。</p>
<p>综上所述，请你不要再手动调用<code>re.compile</code>了，这是从其他语言（对的，我说的就是Java）带过来的陋习。</p>

      
    </div>

    

    
    
    

    
      